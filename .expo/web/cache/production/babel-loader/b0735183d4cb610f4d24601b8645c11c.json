{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"style\",\"size\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React from'react';import Center from\"./Center\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var Circle=function Circle(_ref,ref){var style=_ref.style,size=_ref.size,props=_objectWithoutProperties(_ref,_excluded);if(useHasResponsiveProps(props)){return null;}return React.createElement(Center,_extends({rounded:\"full\",size:size},props,{ref:ref,height:props.height?props.height:undefined,width:props.width?props.width:undefined,style:style}));};export default React.memo(React.forwardRef(Circle));","map":{"version":3,"sources":["Circle.tsx"],"names":["Circle","props","useHasResponsiveProps","size","style","React"],"mappings":"2YAAA,MAAA,CAAA,KAAA,KAAA,OAAA,CACA,MAAA,CAAA,MAAA,gBAEA,OAAA,qBAAA,4CAEA,GAAMA,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,MAAA,GAAA,CAAuD,IAAtD,CAAA,KAAsD,MAAtD,KAAsD,CAAtD,IAAsD,MAAtD,IAAsD,CAApCC,KAAoC,0CAEpE,GAAIC,qBAAqB,CAAzB,KAAyB,CAAzB,CAAkC,CAChC,MAAA,KAAA,CACD,CACD,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,MAAA,CAAA,QAAA,CAAA,CACE,OAAO,CADT,MAAA,CAEE,IAAI,CAAEC,IAFR,CAAA,CAAA,KAAA,CAAA,CAIE,GAAG,CAJL,GAAA,CAKE,MAAM,CAAEF,KAAK,CAALA,MAAAA,CAAeA,KAAK,CAApBA,MAAAA,CALV,SAAA,CAME,KAAK,CAAEA,KAAK,CAALA,KAAAA,CAAcA,KAAK,CAAnBA,KAAAA,CANT,SAAA,CAOE,KAAK,CAAEG,KAPT,CAAA,CAAA,CADF,CALF,CAAA,CAkBA,cAAeC,CAAAA,KAAK,CAALA,IAAAA,CAAWA,KAAK,CAALA,UAAAA,CAA1B,MAA0BA,CAAXA,CAAf","sourcesContent":["import React from 'react';\nimport Center from './Center';\nimport type { ICircleProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Circle = ({ style, size, ...props }: ICircleProps, ref: any) => {\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Center\n      rounded=\"full\"\n      size={size}\n      {...props}\n      ref={ref}\n      height={props.height ? props.height : undefined}\n      width={props.width ? props.width : undefined}\n      style={style}\n    />\n  );\n};\n\nexport default React.memo(React.forwardRef(Circle));\n"]},"metadata":{},"sourceType":"module"}