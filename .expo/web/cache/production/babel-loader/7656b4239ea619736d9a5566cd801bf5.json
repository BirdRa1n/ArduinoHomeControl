{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"children\",\"isOpen\",\"onClose\",\"defaultIsOpen\",\"initialFocusRef\",\"finalFocusRef\",\"avoidKeyboard\",\"closeOnOverlayClick\",\"isKeyboardDismissable\",\"overlayVisible\",\"backdropVisible\",\"animationPreset\"],_excluded2=[\"contentSize\",\"_backdrop\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{forwardRef,memo}from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Backdrop from\"../Backdrop\";import{Slide}from\"../Transitions\";import{FocusScope}from'@react-native-aria/focus';import{useControllableState,usePropsResolution}from\"../../../hooks\";import{ModalContext}from\"./Context\";import Box from\"../../primitives/Box\";import{Fade}from\"../../composites/Transitions\";import{useKeyboardBottomInset}from\"../../../utils\";import{Overlay}from\"../../primitives/Overlay\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var Modal=function Modal(_ref,ref){var children=_ref.children,isOpen=_ref.isOpen,onClose=_ref.onClose,defaultIsOpen=_ref.defaultIsOpen,initialFocusRef=_ref.initialFocusRef,finalFocusRef=_ref.finalFocusRef,avoidKeyboard=_ref.avoidKeyboard,_ref$closeOnOverlayCl=_ref.closeOnOverlayClick,closeOnOverlayClick=_ref$closeOnOverlayCl===void 0?true:_ref$closeOnOverlayCl,_ref$isKeyboardDismis=_ref.isKeyboardDismissable,isKeyboardDismissable=_ref$isKeyboardDismis===void 0?true:_ref$isKeyboardDismis,_ref$overlayVisible=_ref.overlayVisible,overlayVisible=_ref$overlayVisible===void 0?true:_ref$overlayVisible,_ref$backdropVisible=_ref.backdropVisible,backdropVisible=_ref$backdropVisible===void 0?true:_ref$backdropVisible,_ref$animationPreset=_ref.animationPreset,animationPreset=_ref$animationPreset===void 0?'fade':_ref$animationPreset,rest=_objectWithoutProperties(_ref,_excluded);var bottomInset=useKeyboardBottomInset();var _usePropsResolution=usePropsResolution('Modal',rest),contentSize=_usePropsResolution.contentSize,_backdrop=_usePropsResolution._backdrop,resolvedProps=_objectWithoutProperties(_usePropsResolution,_excluded2);var _useControllableState=useControllableState({value:isOpen,defaultValue:defaultIsOpen,onChange:function onChange(val){if(!val)onClose&&onClose();}}),_useControllableState2=_slicedToArray(_useControllableState,2),visible=_useControllableState2[0],setVisible=_useControllableState2[1];var handleClose=React.useCallback(function(){return setVisible(false);},[setVisible]);var child=React.createElement(Box,_extends({bottom:avoidKeyboard?bottomInset+'px':undefined},resolvedProps,{ref:ref,pointerEvents:\"box-none\"}),children);var contextValue=React.useMemo(function(){return{handleClose:handleClose,contentSize:contentSize,initialFocusRef:initialFocusRef,finalFocusRef:finalFocusRef,visible:visible};},[handleClose,contentSize,initialFocusRef,finalFocusRef,visible]);if(useHasResponsiveProps(rest)){return null;}return React.createElement(Overlay,{isOpen:visible,onRequestClose:handleClose,isKeyboardDismissable:isKeyboardDismissable,animationPreset:animationPreset,useRNModalOnAndroid:true},React.createElement(ModalContext.Provider,{value:contextValue},React.createElement(Fade,{exitDuration:150,entryDuration:200,in:visible,style:StyleSheet.absoluteFill},overlayVisible&&backdropVisible&&React.createElement(Backdrop,_extends({onPress:function onPress(){closeOnOverlayClick&&handleClose();}},_backdrop))),animationPreset==='slide'?React.createElement(Slide,{in:visible,overlay:false,duration:200},React.createElement(FocusScope,{contain:visible,autoFocus:visible&&!initialFocusRef,restoreFocus:visible&&!finalFocusRef},child)):React.createElement(Fade,{exitDuration:100,entryDuration:200,in:visible,style:StyleSheet.absoluteFill},React.createElement(FocusScope,{contain:visible,autoFocus:visible&&!initialFocusRef,restoreFocus:visible&&!finalFocusRef},child))));};export default memo(forwardRef(Modal));","map":{"version":3,"sources":["Modal.tsx"],"names":["Modal","closeOnOverlayClick","isKeyboardDismissable","overlayVisible","backdropVisible","animationPreset","rest","bottomInset","useKeyboardBottomInset","resolvedProps","usePropsResolution","useControllableState","value","defaultValue","onChange","val","onClose","handleClose","React","setVisible","child","avoidKeyboard","undefined","contextValue","contentSize","initialFocusRef","finalFocusRef","visible","useHasResponsiveProps","StyleSheet","absoluteFill","memo","forwardRef"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Backdrop from '../Backdrop';\nimport { Slide } from '../Transitions';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { useControllableState, usePropsResolution } from '../../../hooks';\nimport { ModalContext } from './Context';\nimport Box from '../../primitives/Box';\nimport type { IModalProps } from './types';\nimport { Fade } from '../../composites/Transitions';\nimport { useKeyboardBottomInset } from '../../../utils';\nimport { Overlay } from '../../primitives/Overlay';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Modal = (\n  {\n    children,\n    isOpen,\n    onClose,\n    defaultIsOpen,\n    initialFocusRef,\n    finalFocusRef,\n    avoidKeyboard,\n    closeOnOverlayClick = true,\n    isKeyboardDismissable = true,\n    overlayVisible = true,\n    backdropVisible = true,\n    //@ts-ignore - internal purpose only\n    animationPreset = 'fade',\n    ...rest\n  }: IModalProps,\n  ref: any\n) => {\n  const bottomInset = useKeyboardBottomInset();\n  const { contentSize, _backdrop, ...resolvedProps } = usePropsResolution(\n    'Modal',\n    rest\n  );\n\n  const [visible, setVisible] = useControllableState({\n    value: isOpen,\n    defaultValue: defaultIsOpen,\n    onChange: (val) => {\n      if (!val) onClose && onClose();\n    },\n  });\n\n  const handleClose = React.useCallback(() => setVisible(false), [setVisible]);\n\n  const child = (\n    <Box\n      bottom={avoidKeyboard ? bottomInset + 'px' : undefined}\n      {...resolvedProps}\n      ref={ref}\n      pointerEvents=\"box-none\"\n    >\n      {children}\n    </Box>\n  );\n\n  const contextValue = React.useMemo(() => {\n    return {\n      handleClose,\n      contentSize,\n      initialFocusRef,\n      finalFocusRef,\n      visible,\n    };\n  }, [handleClose, contentSize, initialFocusRef, finalFocusRef, visible]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(rest)) {\n    return null;\n  }\n  // console.log('visible here', visible);\n  return (\n    <Overlay\n      isOpen={visible}\n      onRequestClose={handleClose}\n      isKeyboardDismissable={isKeyboardDismissable}\n      animationPreset={animationPreset}\n      useRNModalOnAndroid\n    >\n      <ModalContext.Provider value={contextValue}>\n        <Fade\n          exitDuration={150}\n          entryDuration={200}\n          in={visible}\n          style={StyleSheet.absoluteFill}\n        >\n          {overlayVisible && backdropVisible && (\n            <Backdrop\n              onPress={() => {\n                closeOnOverlayClick && handleClose();\n              }}\n              {..._backdrop}\n            />\n          )}\n        </Fade>\n        {animationPreset === 'slide' ? (\n          <Slide in={visible} overlay={false} duration={200}>\n            <FocusScope\n              contain={visible}\n              autoFocus={visible && !initialFocusRef}\n              restoreFocus={visible && !finalFocusRef}\n            >\n              {child}\n            </FocusScope>\n          </Slide>\n        ) : (\n          <Fade\n            exitDuration={100}\n            entryDuration={200}\n            in={visible}\n            style={StyleSheet.absoluteFill}\n          >\n            <FocusScope\n              contain={visible}\n              autoFocus={visible && !initialFocusRef}\n              restoreFocus={visible && !finalFocusRef}\n            >\n              {child}\n            </FocusScope>\n          </Fade>\n        )}\n      </ModalContext.Provider>\n    </Overlay>\n  );\n};\n\nexport default memo(forwardRef(Modal));\n"]},"metadata":{},"sourceType":"module"}