{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"min\",\"max\",\"value\",\"_filledTrack\",\"children\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import{Box}from\"../../primitives\";import{usePropsResolution}from\"../../../hooks/useThemeProps\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var Progress=function Progress(props,ref){var _usePropsResolution=usePropsResolution('Progress',props),min=_usePropsResolution.min,max=_usePropsResolution.max,value=_usePropsResolution.value,_filledTrack=_usePropsResolution._filledTrack,children=_usePropsResolution.children,resolvedProps=_objectWithoutProperties(_usePropsResolution,_excluded);if(useHasResponsiveProps(props)){return null;}return React.createElement(Box,_extends({},resolvedProps,{ref:ref,accessible:true,accessibilityRole:\"progressbar\",accessibilityValue:{min:min,max:max,now:value<max&&value>min?(value-min)/(max-min)*100:value>min?100:0}}),React.createElement(Box,_extends({},_filledTrack,{w:value<max&&value>min?(value-min)/(max-min)*100+'%':value>min?'100%':'0%'}),children));};export default memo(forwardRef(Progress));","map":{"version":3,"sources":["index.tsx"],"names":["Progress","resolvedProps","usePropsResolution","useHasResponsiveProps","min","max","now","value","memo","forwardRef"],"mappings":"0aAAA,MAAA,CAAA,KAAA,EAAA,IAAA,CAAA,UAAA,KAAA,OAAA,CACA,OAAA,GAAA,wBACA,OAAA,kBAAA,oCACA,OAAA,qBAAA,4CA0CA,GAAMA,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAA,KAAA,CAAA,GAAA,CAAsC,CACrD,wBAOIE,kBAAkB,CAAA,UAAA,CAR+B,KAQ/B,CAPtB,CAAM,GAAN,qBAAM,GAAN,CAAM,GAAN,qBAAM,GAAN,CAAM,KAAN,qBAAM,KAAN,CAAM,YAAN,qBAAM,YAAN,CAAM,QAAN,qBAAM,QAAN,CAMKD,aANL,yDAUA,GAAIE,qBAAqB,CAAzB,KAAyB,CAAzB,CAAkC,CAChC,MAAA,KAAA,CACD,CAED,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,GAAA,CAAA,QAAA,CAAA,EAAA,CAAA,aAAA,CAAA,CAEE,GAAG,CAFL,GAAA,CAGE,UAAU,CAHZ,IAAA,CAIE,iBAAiB,CAJnB,aAAA,CAKE,kBAAkB,CAAE,CAClBC,GAAG,CADe,GAAA,CAElBC,GAAG,CAFe,GAAA,CAGlBC,GAAG,CACDC,KAAK,CAALA,GAAAA,EAAeA,KAAK,CAApBA,GAAAA,CACK,CAACA,KAAK,CAAN,GAAA,GAAiBF,GAAG,CAArB,GAAC,EADLE,GAAAA,CAEIA,KAAK,CAALA,GAAAA,CAAAA,GAAAA,CAEA,CARY,CALtB,CAAA,CAAA,CAgBE,KAAA,CAAA,aAAA,CAAA,GAAA,CAAA,QAAA,CAAA,EAAA,CAAA,YAAA,CAAA,CAGE,CAAC,CACCA,KAAK,CAALA,GAAAA,EAAeA,KAAK,CAApBA,GAAAA,CACK,CAACA,KAAK,CAAN,GAAA,GAAiBF,GAAG,CAArB,GAAC,EAAD,GAAC,CADLE,GAAAA,CAEIA,KAAK,CAALA,GAAAA,CAAAA,MAAAA,CAEA,IARR,CAAA,CAAA,CAjBJ,QAiBI,CAhBF,CADF,CAfF,CAAA,CAiDA,cAAeC,CAAAA,IAAI,CAACC,UAAU,CAA9B,QAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Box, IBoxProps } from '../../primitives';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { ResponsiveValue } from '../../../components/types';\nimport type { ISizes } from '../../../theme/base/sizes';\n\nexport interface IProgressProps extends IBoxProps<IProgressProps> {\n  /**\n   * Value of Progress.\n   * @default 0\n   */\n  value?: number;\n  /**\n   * Defines height of Progress\n   * @default sm\n   */\n  size?: ResponsiveValue<ISizes | (string & {}) | number>;\n\n  /**\n   * The color scheme of the progress. This should be one of the color keys in the theme (e.g.\"green\", \"red\").\n   * @default primary\n   */\n  colorScheme?: string;\n  // /**\n  //  * Whether progress is indeterminate\n  //  * @default false\n  //  */\n  // isIndeterminate?: boolean;\n  /**\n   * Pseudo prop to give Prop to filled track\n   */\n  _filledTrack?: IBoxProps<IProgressProps>;\n  /**\n   * Min progress value\n   * @default 0\n   */\n  min?: number;\n  /**\n   * Max progress value\n   * @default 100\n   */\n  max?: number;\n}\n\nconst Progress = (props: IProgressProps, ref?: any) => {\n  const {\n    min,\n    max,\n    value,\n    _filledTrack,\n    children,\n    ...resolvedProps\n  } = usePropsResolution('Progress', props);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box\n      {...resolvedProps}\n      ref={ref}\n      accessible\n      accessibilityRole=\"progressbar\"\n      accessibilityValue={{\n        min: min,\n        max: max,\n        now:\n          value < max && value > min\n            ? ((value - min) / (max - min)) * 100\n            : value > min\n            ? 100\n            : 0,\n      }}\n    >\n      <Box\n        // {...resolvedProps}\n        {..._filledTrack}\n        w={\n          value < max && value > min\n            ? ((value - min) / (max - min)) * 100 + '%'\n            : value > min\n            ? '100%'\n            : '0%'\n        }\n      >\n        {children}\n      </Box>\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Progress));\n"]},"metadata":{},"sourceType":"module"}