{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"_icon\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import{AlertDialogContext}from\"./Context\";import{usePropsResolution}from\"../../../hooks\";import Button from\"../../primitives/Button/Button\";import{CloseIcon}from\"../../primitives/Icon/Icons\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var AlertDialogCloseButton=function AlertDialogCloseButton(props,ref){var newProps=usePropsResolution('AlertDialogCloseButton',props);var _icon=newProps._icon,rest=_objectWithoutProperties(newProps,_excluded);var _React$useContext=React.useContext(AlertDialogContext),handleClose=_React$useContext.handleClose;if(useHasResponsiveProps(props)){return null;}return React.createElement(Button,_extends({variant:\"ghost\"},rest,{onPress:handleClose,accessibilityLabel:\"Close dialog\",ref:ref}),React.createElement(CloseIcon,_icon));};export default memo(forwardRef(AlertDialogCloseButton));","map":{"version":3,"sources":["AlertDialogCloseButton.tsx"],"names":["AlertDialogCloseButton","newProps","usePropsResolution","rest","handleClose","React","useHasResponsiveProps","ref","memo","forwardRef"],"mappings":"oYAAA,MAAA,CAAA,KAAA,EAAA,IAAA,CAAA,UAAA,KAAA,OAAA,CACA,OAAA,kBAAA,iBACA,OAAA,kBAAA,sBACA,MAAA,CAAA,MAAA,sCACA,OAAA,SAAA,mCAEA,OAAA,qBAAA,4CAEA,GAAMA,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CAAA,KAAA,CAAA,GAAA,CAAoC,CACjE,GAAMC,CAAAA,QAAQ,CAAGC,kBAAkB,CAAA,wBAAA,CAAnC,KAAmC,CAAnC,CACA,GAAM,CAAA,KAAN,CAAA,QAAA,CAAM,KAAN,CAAkBC,IAAlB,0BAAA,QAAA,YACA,sBAAwBE,KAAK,CAALA,UAAAA,CAHyC,kBAGzCA,CAAxB,CAAQD,WAAR,mBAAQA,WAAR,CAEA,GAAIE,qBAAqB,CAAzB,KAAyB,CAAzB,CAAkC,CAChC,MAAA,KAAA,CACD,CACD,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,MAAA,CAAA,QAAA,CAAA,CACE,OAAO,CAAC,OADV,CAAA,CAAA,IAAA,CAAA,CAGE,OAAO,CAHT,WAAA,CAIE,kBAAkB,CAJpB,cAAA,CAKE,GAAG,CAAEC,GALP,CAAA,CAAA,CAOE,KAAA,CAAA,aAAA,CAAA,SAAA,CARJ,KAQI,CAPF,CADF,CARF,CAAA,CAqBA,cAAeC,CAAAA,IAAI,CAACC,UAAU,CAA9B,sBAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { AlertDialogContext } from './Context';\nimport { usePropsResolution } from '../../../hooks';\nimport Button from '../../primitives/Button/Button';\nimport { CloseIcon } from '../../primitives/Icon/Icons';\nimport type { IButtonProps } from '../../primitives/Button';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AlertDialogCloseButton = (props: IButtonProps, ref?: any) => {\n  const newProps = usePropsResolution('AlertDialogCloseButton', props);\n  const { _icon, ...rest } = newProps;\n  const { handleClose } = React.useContext(AlertDialogContext);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Button\n      variant=\"ghost\"\n      {...rest}\n      onPress={handleClose}\n      accessibilityLabel=\"Close dialog\"\n      ref={ref}\n    >\n      <CloseIcon {..._icon} />\n    </Button>\n  );\n};\n\nexport default memo(forwardRef(AlertDialogCloseButton));\n"]},"metadata":{},"sourceType":"module"}