{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"children\"],_excluded2=[\"astrickColor\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import Box from\"../../primitives/Box\";import Text from\"../../primitives/Text\";import{useFormControlContext}from\"./useFormControl\";import{usePropsResolution}from\"../../../hooks/useThemeProps\";import{mergeRefs}from\"../../../utils\";import{combineContextAndProps}from\"../../../utils\";var FormControlLabel=function FormControlLabel(_ref2,ref){var children=_ref2.children,props=_objectWithoutProperties(_ref2,_excluded);var formControlContext=useFormControlContext();var combinedProps=combineContextAndProps(formControlContext,props);var _ref=React.useRef(null);var _usePropsResolution=usePropsResolution('FormControlLabel',combinedProps,{isDisabled:combinedProps.isDisabled,isReadOnly:combinedProps.isReadOnly,isInvalid:combinedProps.isInvalid}),astrickColor=_usePropsResolution.astrickColor,reslovedProps=_objectWithoutProperties(_usePropsResolution,_excluded2);var requiredAsterisk=function requiredAsterisk(){return React.createElement(Text,{_web:{accessibilityHidden:true,accessibilityRole:'presentation'},color:astrickColor},\"*\");};var mergedRef=mergeRefs([_ref,ref]);React.useEffect(function(){if(_ref.current){if(props.htmlFor){_ref.current.htmlFor=props.htmlFor;}else if(reslovedProps!==null&&reslovedProps!==void 0&&reslovedProps.nativeID){_ref.current.htmlFor=reslovedProps.nativeID;}}},[reslovedProps===null||reslovedProps===void 0?void 0:reslovedProps.nativeID,props.htmlFor]);return React.createElement(Box,_extends({flexDirection:\"row\",justifyContent:\"flex-start\",_web:{accessibilityRole:'label'}},reslovedProps,{nativeID:reslovedProps===null||reslovedProps===void 0?void 0:reslovedProps.labelId,ref:mergedRef}),children,(reslovedProps===null||reslovedProps===void 0?void 0:reslovedProps.isRequired)&&requiredAsterisk());};export default memo(forwardRef(FormControlLabel));","map":{"version":3,"sources":["FormControlLabel.tsx"],"names":["FormControlLabel","props","formControlContext","useFormControlContext","combinedProps","combineContextAndProps","_ref","React","reslovedProps","usePropsResolution","isDisabled","isReadOnly","isInvalid","requiredAsterisk","accessibilityHidden","accessibilityRole","astrickColor","mergedRef","mergeRefs","memo","forwardRef"],"mappings":"maAAA,MAAA,CAAA,KAAA,EAAA,IAAA,CAAA,UAAA,KAAA,OAAA,CACA,MAAA,CAAA,GAAA,4BACA,MAAA,CAAA,IAAA,6BACA,OAAA,qBAAA,wBACA,OAAA,kBAAA,oCAEA,OAAA,SAAA,sBACA,OAAA,sBAAA,sBAEA,GAAMA,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,OAAA,GAAA,CAGpB,IAFH,CAAA,QAEG,OAFH,QAEG,CAFYC,KAEZ,2CACH,GAAMC,CAAAA,kBAAkB,CAAGC,qBAA3B,EAAA,CACA,GAAMC,CAAAA,aAAa,CAAGC,sBAAsB,CAAA,kBAAA,CAA5C,KAA4C,CAA5C,CACA,GAAMC,CAAAA,IAAI,CAAGC,KAAK,CAALA,MAAAA,CAAb,IAAaA,CAAb,CACA,wBAA2CE,kBAAkB,CAAA,kBAAA,CAAA,aAAA,CAG3D,CACEC,UAAU,CAAEN,aAAa,CAD3B,UAAA,CAEEO,UAAU,CAAEP,aAAa,CAF3B,UAAA,CAGEQ,SAAS,CAAER,aAAa,CAH1B,SAAA,CAH2D,CAA7D,CAAM,YAAN,qBAAM,YAAN,CAAyBI,aAAzB,0DAWA,GAAMK,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,SACvB,CAAA,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CACE,IAAI,CAAE,CACJC,mBAAmB,CADf,IAAA,CAGJC,iBAAiB,CAAE,cAHf,CADR,CAME,KAAK,CAAEC,YANT,CAAA,CADF,GACE,CADuB,EAAzB,CAYA,GAAMC,CAAAA,SAAS,CAAGC,SAAS,CAAC,CAAA,IAAA,CAA5B,GAA4B,CAAD,CAA3B,CACAX,KAAK,CAALA,SAAAA,CAAgB,UAAM,CACpB,GAAID,IAAI,CAAR,OAAA,CAAkB,CAEhB,GAAIL,KAAK,CAAT,OAAA,CAAmB,CACjBK,IAAI,CAAJA,OAAAA,CAAAA,OAAAA,CAAuBL,KAAK,CAA5BK,OAAAA,CADF,CAAA,IAEO,IAAIE,aAAJ,GAAA,IAAIA,EAAAA,aAAJ,GAAA,IAAA,EAAIA,EAAAA,aAAa,CAAjB,QAAA,CAA6B,CAClCF,IAAI,CAAJA,OAAAA,CAAAA,OAAAA,CAAuBE,aAAa,CAApCF,QAAAA,CACD,CACF,CARHC,CAAAA,CASG,CAACC,aAAD,GAAA,IAACA,EAAAA,aAAD,GAAA,IAAA,EAACA,CAAD,IAAA,EAACA,CAAAA,aAAa,CAAd,QAAA,CAA0BP,KAAK,CATlCM,OASG,CATHA,EAWA,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,GAAA,CAAA,QAAA,CAAA,CACE,aAAa,CADf,KAAA,CAEE,cAAc,CAFhB,YAAA,CAGE,IAAI,CAAE,CAEJQ,iBAAiB,CAAE,OAFf,CAHR,CAAA,CAAA,aAAA,CAAA,CAQE,QAAQ,CAAEP,aAAF,GAAA,IAAEA,EAAAA,aAAF,GAAA,IAAA,EAAEA,CAAF,IAAA,EAAEA,CAAAA,aAAa,CARzB,OAAA,CASE,GAAG,CAAES,SATP,CAAA,CAAA,CAAA,QAAA,CAYG,CAAA,aAAa,GAAb,IAAA,EAAA,aAAa,GAAA,IAAb,EAAA,CAAA,IAAA,EAAA,CAAA,aAAa,CAAb,UAAA,GAA6BJ,gBAblC,EACE,CADF,CA1CF,CAAA,CA2DA,cAAeM,CAAAA,IAAI,CAACC,UAAU,CAA9B,gBAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport Text from '../../primitives/Text';\nimport { useFormControlContext } from './useFormControl';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IFormControlLabelProps } from './types';\nimport { mergeRefs } from '../../../utils';\nimport { combineContextAndProps } from '../../../utils';\n\nconst FormControlLabel = (\n  { children, ...props }: IFormControlLabelProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const combinedProps = combineContextAndProps(formControlContext, props);\n  const _ref = React.useRef<HTMLLabelElement>(null);\n  const { astrickColor, ...reslovedProps } = usePropsResolution(\n    'FormControlLabel',\n    combinedProps,\n    {\n      isDisabled: combinedProps.isDisabled,\n      isReadOnly: combinedProps.isReadOnly,\n      isInvalid: combinedProps.isInvalid,\n      // isRequired: combinedProps.isRequired,\n    }\n  );\n\n  const requiredAsterisk = () => (\n    <Text\n      _web={{\n        accessibilityHidden: true,\n        //@ts-ignore\n        accessibilityRole: 'presentation',\n      }}\n      color={astrickColor}\n    >\n      *\n    </Text>\n  );\n  const mergedRef = mergeRefs([_ref, ref]);\n  React.useEffect(() => {\n    if (_ref.current) {\n      // RN web doesn't support htmlFor for Label element yet\n      if (props.htmlFor) {\n        _ref.current.htmlFor = props.htmlFor;\n      } else if (reslovedProps?.nativeID) {\n        _ref.current.htmlFor = reslovedProps.nativeID;\n      }\n    }\n  }, [reslovedProps?.nativeID, props.htmlFor]);\n\n  return (\n    <Box\n      flexDirection=\"row\"\n      justifyContent=\"flex-start\"\n      _web={{\n        //@ts-ignore\n        accessibilityRole: 'label',\n      }}\n      {...reslovedProps}\n      nativeID={reslovedProps?.labelId}\n      ref={mergedRef}\n    >\n      {children}\n      {reslovedProps?.isRequired && requiredAsterisk()}\n    </Box>\n  );\n};\nexport default memo(forwardRef(FormControlLabel));\n"]},"metadata":{},"sourceType":"module"}