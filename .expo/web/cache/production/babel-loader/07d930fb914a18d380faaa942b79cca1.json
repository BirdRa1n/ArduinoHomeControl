{"ast":null,"code":"function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import Box from\"../../primitives/Box\";import{usePropsResolution}from\"../../../hooks\";import ScrollView from\"react-native-web/dist/exports/ScrollView\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var AlertDialogBody=function AlertDialogBody(props,ref){var newProps=usePropsResolution('AlertDialogBody',props);if(useHasResponsiveProps(props)){return null;}return React.createElement(ScrollView,null,React.createElement(Box,_extends({},newProps,{ref:ref}),props.children));};export default memo(forwardRef(AlertDialogBody));","map":{"version":3,"sources":["AlertDialogBody.tsx"],"names":["AlertDialogBody","newProps","usePropsResolution","useHasResponsiveProps","ref","props","memo","forwardRef"],"mappings":"uRAAA,MAAA,CAAA,KAAA,EAAA,IAAA,CAAA,UAAA,KAAA,OAAA,CACA,MAAA,CAAA,GAAA,4BACA,OAAA,kBAAA,sB,iEAEA,OAAA,qBAAA,4CAEA,GAAMA,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAA,KAAA,CAAA,GAAA,CAAiC,CACvD,GAAMC,CAAAA,QAAQ,CAAGC,kBAAkB,CAAA,iBAAA,CADoB,KACpB,CAAnC,CAEA,GAAIC,qBAAqB,CAAzB,KAAyB,CAAzB,CAAkC,CAChC,MAAA,KAAA,CACD,CACD,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,UAAA,CAAA,IAAA,CACE,KAAA,CAAA,aAAA,CAAA,GAAA,CAAA,QAAA,CAAA,EAAA,CAAA,QAAA,CAAA,CAAmB,GAAG,CAAEC,GAAxB,CAAA,CAAA,CACGC,KAAK,CAHZ,QAEI,CADF,CADF,CANF,CAAA,CAeA,cAAeC,CAAAA,IAAI,CAACC,UAAU,CAA9B,eAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box, { IBoxProps } from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks';\nimport { ScrollView } from 'react-native';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AlertDialogBody = (props: IBoxProps, ref?: any) => {\n  const newProps = usePropsResolution('AlertDialogBody', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <ScrollView>\n      <Box {...newProps} ref={ref}>\n        {props.children}\n      </Box>\n    </ScrollView>\n  );\n};\n\nexport default memo(forwardRef(AlertDialogBody));\n"]},"metadata":{},"sourceType":"module"}