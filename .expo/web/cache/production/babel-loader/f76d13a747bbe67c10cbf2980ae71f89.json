{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"children\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import Box from\"../../primitives/Box\";import{usePropsResolution}from\"../../../hooks/useThemeProps\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var Badge=function Badge(_ref,ref){var children=_ref.children,props=_objectWithoutProperties(_ref,_excluded);var newProps=usePropsResolution('Badge',props);if(useHasResponsiveProps(props)){return null;}return React.createElement(Box,_extends({},newProps,{ref:ref}),children);};export default memo(forwardRef(Badge));","map":{"version":3,"sources":["index.tsx"],"names":["Badge","props","newProps","usePropsResolution","useHasResponsiveProps","ref","memo","forwardRef"],"mappings":"uYAAA,MAAA,CAAA,KAAA,EAAA,IAAA,CAAA,UAAA,KAAA,OAAA,CACA,MAAA,CAAA,GAAA,4BAEA,OAAA,kBAAA,oCACA,OAAA,qBAAA,4CAEA,GAAMA,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,MAAA,GAAA,CAAmD,IAAlD,CAAA,QAAkD,MAAlD,QAAkD,CAAnCC,KAAmC,0CAC/D,GAAIC,CAAAA,QAAQ,CAAGC,kBAAkB,CAAA,OAAA,CAD8B,KAC9B,CAAjC,CAEA,GAAIC,qBAAqB,CAAzB,KAAyB,CAAzB,CAAkC,CAChC,MAAA,KAAA,CACD,CACD,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,GAAA,CAAA,QAAA,CAAA,EAAA,CAAA,QAAA,CAAA,CAAmB,GAAG,CAAEC,GAAxB,CAAA,CAAA,CADF,QACE,CADF,CANF,CAAA,CAaA,cAAeC,CAAAA,IAAI,CAACC,UAAU,CAA9B,KAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport type { IBadgeProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Badge = ({ children, ...props }: IBadgeProps, ref: any) => {\n  let newProps = usePropsResolution('Badge', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box {...newProps} ref={ref}>\n      {children}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Badge));\nexport type { IBadgeProps };\n"]},"metadata":{},"sourceType":"module"}