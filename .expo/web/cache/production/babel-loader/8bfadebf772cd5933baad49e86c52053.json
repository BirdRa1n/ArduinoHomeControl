{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"align\",\"justify\",\"wrap\",\"basis\",\"grow\",\"shrink\",\"direction\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{memo,forwardRef}from'react';import Box from\"../Box\";import{usePropsResolution}from\"../../../hooks/useThemeProps\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var Flex=function Flex(props,ref){var _usePropsResolution=usePropsResolution('Flex',props),align=_usePropsResolution.align,justify=_usePropsResolution.justify,wrap=_usePropsResolution.wrap,basis=_usePropsResolution.basis,grow=_usePropsResolution.grow,shrink=_usePropsResolution.shrink,direction=_usePropsResolution.direction,resolvedProps=_objectWithoutProperties(_usePropsResolution,_excluded);if(useHasResponsiveProps(props)){return null;}return React.createElement(Box,_extends({},props,resolvedProps,{display:\"flex\",flexDirection:direction||resolvedProps.flexDirection,alignItems:align||resolvedProps.alignItems,justifyContent:justify||resolvedProps.justifyContent,flexGrow:grow||resolvedProps.flexGrow,flexBasis:basis||resolvedProps.flexBasis,flexShrink:shrink||resolvedProps.flexShrink,flexWrap:wrap||resolvedProps.flexWrap,ref:ref}));};export var Spacer=function Spacer(props){return React.createElement(Box,_extends({flexGrow:1},props));};export default memo(forwardRef(Flex));","map":{"version":3,"sources":["index.tsx"],"names":["Flex","resolvedProps","usePropsResolution","useHasResponsiveProps","direction","align","justify","grow","basis","shrink","wrap","ref","Spacer","props","memo","forwardRef"],"mappings":"ybAAA,MAAA,CAAA,KAAA,EAAA,IAAA,CAAA,UAAA,KAAA,OAAA,CACA,MAAA,CAAA,GAAA,cAEA,OAAA,kBAAA,oCACA,OAAA,qBAAA,4CAEA,GAAMA,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,CAAA,KAAA,CAAA,GAAA,CAAiC,CAC5C,wBASIE,kBAAkB,CAAA,MAAA,CAVsB,KAUtB,CATtB,CAAM,KAAN,qBAAM,KAAN,CAAM,OAAN,qBAAM,OAAN,CAAM,IAAN,qBAAM,IAAN,CAAM,KAAN,qBAAM,KAAN,CAAM,IAAN,qBAAM,IAAN,CAAM,MAAN,qBAAM,MAAN,CAAM,SAAN,qBAAM,SAAN,CAQKD,aARL,yDAYA,GAAIE,qBAAqB,CAAzB,KAAyB,CAAzB,CAAkC,CAChC,MAAA,KAAA,CACD,CAED,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,GAAA,CAAA,QAAA,CAAA,EAAA,CAAA,KAAA,CAAA,aAAA,CAAA,CAGE,OAAO,CAHT,MAAA,CAIE,aAAa,CAAEC,SAAS,EAAIH,aAAa,CAJ3C,aAAA,CAKE,UAAU,CAAEI,KAAK,EAAIJ,aAAa,CALpC,UAAA,CAME,cAAc,CAAEK,OAAO,EAAIL,aAAa,CAN1C,cAAA,CAOE,QAAQ,CAAEM,IAAI,EAAIN,aAAa,CAPjC,QAAA,CAQE,SAAS,CAAEO,KAAK,EAAIP,aAAa,CARnC,SAAA,CASE,UAAU,CAAEQ,MAAM,EAAIR,aAAa,CATrC,UAAA,CAUE,QAAQ,CAAES,IAAI,EAAIT,aAAa,CAVjC,QAAA,CAWE,GAAG,CAAEU,GAXP,CAAA,CAAA,CADF,CAjBF,CAAA,CAmCA,MAAO,IAAMC,CAAAA,MAAM,CAAIC,QAAVD,CAAAA,MAAUC,CAAAA,KAAD,CAAgB,CACpC,MAAO,CAAA,KAAA,CAAA,aAAA,CAAA,GAAA,CAAA,QAAA,CAAA,CAAK,QAAQ,CAAE,CAAf,CAAA,CAAP,KAAO,CAAA,CAAP,CADK,CAAA,CAKP,cAAeC,CAAAA,IAAI,CAACC,UAAU,CAA9B,IAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../Box';\nimport type { IFlexProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Flex = (props: IFlexProps, ref: any) => {\n  const {\n    align,\n    justify,\n    wrap,\n    basis,\n    grow,\n    shrink,\n    direction,\n    ...resolvedProps\n  } = usePropsResolution('Flex', props);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box\n      {...props}\n      {...resolvedProps}\n      display=\"flex\"\n      flexDirection={direction || resolvedProps.flexDirection}\n      alignItems={align || resolvedProps.alignItems}\n      justifyContent={justify || resolvedProps.justifyContent}\n      flexGrow={grow || resolvedProps.flexGrow}\n      flexBasis={basis || resolvedProps.flexBasis}\n      flexShrink={shrink || resolvedProps.flexShrink}\n      flexWrap={wrap || resolvedProps.flexWrap}\n      ref={ref}\n    />\n  );\n};\n\n//Spacer Component that adds space between components where it is placed\nexport const Spacer = (props: any) => {\n  return <Box flexGrow={1} {...props} />;\n};\n\nexport type { IFlexProps };\nexport default memo(forwardRef(Flex));\n"]},"metadata":{},"sourceType":"module"}