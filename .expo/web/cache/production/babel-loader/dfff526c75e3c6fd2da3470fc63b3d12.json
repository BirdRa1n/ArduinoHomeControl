{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"value\",\"children\",\"onPress\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{forwardRef,memo}from'react';import{CheckIcon}from\"../../primitives/Icon/Icons\";import Box from\"../../primitives/Box\";import{usePropsResolution}from\"../../../hooks/useThemeProps\";import MenuItem from\"./MenuItem\";import{MenuOptionContext}from\"./MenuOptionGroup\";import{useMenuOptionItem}from\"./useMenu\";import{HStack}from\"../../primitives/Stack\";import{useHasResponsiveProps}from\"../../../hooks/useHasResponsiveProps\";var MenuItemOption=function MenuItemOption(props,ref){var _usePropsResolution=usePropsResolution('MenuItem',props),value=_usePropsResolution.value,children=_usePropsResolution.children,onPress=_usePropsResolution.onPress,resolvedProps=_objectWithoutProperties(_usePropsResolution,_excluded);var _React$useContext=React.useContext(MenuOptionContext),values=_React$useContext.values,onChange=_React$useContext.onChange,type=_React$useContext.type;var modifiedOnPress=function modifiedOnPress(e){onChange(value);onPress&&onPress(e);};var isChecked=values.includes(value);var menuOptionProps=useMenuOptionItem({isChecked:isChecked,type:type});if(useHasResponsiveProps(props)){return null;}return React.createElement(MenuItem,_extends({},resolvedProps,menuOptionProps,{accessibilityRole:\"button\",onPress:modifiedOnPress,ref:ref}),React.createElement(HStack,{alignItems:\"center\",px:resolvedProps.px,space:3},React.createElement(CheckIcon,_extends({},resolvedProps._icon,{opacity:isChecked?1:0})),React.createElement(Box,null,children)));};export default memo(forwardRef(MenuItemOption));","map":{"version":3,"sources":["MenuItemOption.tsx"],"names":["MenuItemOption","resolvedProps","usePropsResolution","type","React","modifiedOnPress","e","onChange","onPress","isChecked","values","menuOptionProps","useMenuOptionItem","useHasResponsiveProps","ref","memo","forwardRef"],"mappings":"yZAAA,MAAA,CAAA,KAAA,EAAA,UAAA,CAAA,IAAA,KAAA,OAAA,CACA,OAAA,SAAA,mCACA,MAAA,CAAA,GAAA,4BACA,OAAA,kBAAA,oCACA,MAAA,CAAA,QAAA,kBAEA,OAAA,iBAAA,yBACA,OAAA,iBAAA,iBACA,OAAA,MAAA,8BACA,OAAA,qBAAA,4CAEA,GAAMA,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAAA,KAAA,CAAA,GAAA,CAA2C,CAChE,wBAAuDE,kBAAkB,CAAA,UAAA,CAAzE,KAAyE,CAAzE,CAAM,KAAN,qBAAM,KAAN,CAAM,QAAN,qBAAM,QAAN,CAAM,OAAN,qBAAM,OAAN,CAAqCD,aAArC,yDAIA,sBAA4DG,KAAK,CAALA,UAAAA,CAA5D,iBAA4DA,CAA5D,CAAM,MAAN,mBAAM,MAAN,CAAM,QAAN,mBAAM,QAAN,CAA0BD,IAA1B,mBAA0BA,IAA1B,CAGA,GAAME,CAAAA,eAAe,CAAIC,QAAnBD,CAAAA,eAAmBC,CAAAA,CAAD,CAAY,CAClCC,QAAQ,CAARA,KAAQ,CAARA,CACAC,OAAO,EAAIA,OAAO,CAAlBA,CAAkB,CAAlBA,CAFF,CAAA,CAKA,GAAMC,CAAAA,SAAS,CAAGC,MAAM,CAANA,QAAAA,CAAlB,KAAkBA,CAAlB,CACA,GAAMC,CAAAA,eAAe,CAAGC,iBAAiB,CAAC,CAAEH,SAAF,CAAEA,SAAF,CAAaN,IAAAA,CAAAA,IAAb,CAAD,CAAzC,CAGA,GAAIU,qBAAqB,CAAzB,KAAyB,CAAzB,CAAkC,CAChC,MAAA,KAAA,CACD,CACD,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,QAAA,CAAA,QAAA,CAAA,EAAA,CAAA,aAAA,CAAA,eAAA,CAAA,CAGE,iBAAiB,CAHnB,QAAA,CAIE,OAAO,CAJT,eAAA,CAKE,GAAG,CAAEC,GALP,CAAA,CAAA,CAOE,KAAA,CAAA,aAAA,CAAA,MAAA,CAAA,CAAQ,UAAU,CAAlB,QAAA,CAA4B,EAAE,CAAEb,aAAa,CAA7C,EAAA,CAAkD,KAAK,CAAE,CAAzD,CAAA,CACE,KAAA,CAAA,aAAA,CAAA,SAAA,CAAA,QAAA,CAAA,EAAA,CAAeA,aAAa,CAA5B,KAAA,CAAA,CAAoC,OAAO,CAAEQ,SAAS,CAAA,CAAA,CAAO,CAA7D,CAAA,CAAA,CADF,CAEE,KAAA,CAAA,aAAA,CAAA,GAAA,CAAA,IAAA,CAVN,QAUM,CAFF,CAPF,CADF,CApBF,CAAA,CAoCA,cAAeM,CAAAA,IAAI,CAACC,UAAU,CAA9B,cAA8B,CAAX,CAAnB","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { CheckIcon } from '../../primitives/Icon/Icons';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport MenuItem from './MenuItem';\nimport type { IMenuItemOptionProps, IMenuOptionContextProps } from './types';\nimport { MenuOptionContext } from './MenuOptionGroup';\nimport { useMenuOptionItem } from './useMenu';\nimport { HStack } from '../../primitives/Stack';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst MenuItemOption = (props: IMenuItemOptionProps, ref: any) => {\n  const { value, children, onPress, ...resolvedProps } = usePropsResolution(\n    'MenuItem',\n    props\n  );\n  const { values, onChange, type }: IMenuOptionContextProps = React.useContext(\n    MenuOptionContext\n  );\n  const modifiedOnPress = (e: any) => {\n    onChange(value);\n    onPress && onPress(e);\n  };\n\n  const isChecked = values.includes(value);\n  const menuOptionProps = useMenuOptionItem({ isChecked, type });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <MenuItem\n      {...resolvedProps}\n      {...menuOptionProps}\n      accessibilityRole=\"button\"\n      onPress={modifiedOnPress}\n      ref={ref}\n    >\n      <HStack alignItems=\"center\" px={resolvedProps.px} space={3}>\n        <CheckIcon {...resolvedProps._icon} opacity={isChecked ? 1 : 0} />\n        <Box>{children}</Box>\n      </HStack>\n    </MenuItem>\n  );\n};\n\nexport default memo(forwardRef(MenuItemOption));\n"]},"metadata":{},"sourceType":"module"}