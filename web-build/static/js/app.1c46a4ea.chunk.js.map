{"version":3,"sources":["components/img/arduino.png","components/screens/Login.js","components/screens/dashboard.js","components/screens/SingUp.js","components/screens/Acct.js","App.js"],"names":["module","exports","Login","navigation","useToast","useState","NativeBaseProvider","Center","_dark","bg","_light","px","flex","React","username","setUsername","password","setPassword","statusLogin","setstatusLogin","setToken","userError","pwsError","warning_error","a","async","AsyncStorage","getItem","value","getData","loginState","gettoken","token","setItem","navigate","Box","alignItems","w","borderRadius","shadow","maxWidth","Image","source","arduino","alt","size","Heading","top","fontSize","FormControl","marginTop","isInvalid","Stack","mx","Label","Input","borderBottomColor","variant","type","placeholder","onChangeText","HelperText","ErrorMessage","leftIcon","WarningOutline","marginBottom","Button","colorScheme","onPress","axios","get","params","req","then","response","console","log","data","Text","color","TouchableOpacity","_web","DashBorard","copyText","setCopyText","useClipboard","onCopy","setData","GetDataAccont","filter","JSON","stringify","arduinoid","warning","h","safeAreaBottom","safeAreaTop","maxW","justifyContent","HStack","left","name","Ionicons","setTimeout","bind","this","Exit","space","showModal","setShowModal","Switch_1","setSwitch_1","Switch_2","setSwitch_2","Switch_3","setSwitch_3","Switch_4","setSwitch_4","Switch_5","setSwitch_5","Switch_6","setSwitch_6","Switch_7","setSwitch_7","Switch_8","setSwitch_8","Switch_9","setSwitch_9","Switch_10","setSwitch_10","Switch_11","setSwitch_11","Switch_12","setSwitch_12","Switch_13","setSwitch_13","Switch_14","setSwitch_14","Switch_15","setSwitch_15","light_opt1","light_opt2","light_opt3","light_opt4","light_opt5","light_opt6","light_opt7","light_opt8","light_opt9","light_opt10","light_opt11","light_opt12","light_opt13","light_opt14","light_opt15","setLights","light_1","light_2","light_3","light_4","light_5","light_6","light_7","light_8","light_9","light_10","light_11","light_12","light_13","light_14","light_15","SetandGetDataLights","borderTopRadius","ScrollView","horizontal","showsHorizontalScrollIndicator","AntDesign","WebBrowser","alert","Modal","isOpen","onClose","Content","Body","VStack","Switch","onChange","isChecked","alignContent","Entypo","FontAwesome","FontAwesome5","bottom","Link","href","isExternal","Platform","OS","Spinner","accessibilityLabel","Alert","status","flexShrink","Icon","fontWeight","_text","textAlign","SingUp","password_confirm","setPassword_confirm","email","setEmail","setName","setMessage","dangerform","setdangerform","dangerformUser","setdangerformUser","show","setShow","passwordError","Collapse","defaultValue","Create","Acct","dd","parse","createNativeStackNavigator","App","loginStatus","setLoginState","useEffect","NavigationContainer","Navigator","initialRouteName","Screen","component","options","headerShown","headerBackVisible","headerBackTitle","headerTitle"],"mappings":"yEAAAA,EAAOC,QAAU,IAA0B,qC,sSCgC5B,SAASC,EAAT,GAAgC,IAAfC,EAAc,EAAdA,WAE5B,GADcC,cACUC,mBAAS,KAAjC,qBAqHA,OACI,gBAACC,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAQC,MAAO,CAAEC,GAAI,gBAAkBC,OAAQ,CAAED,GAAI,cAAgBE,GAAI,EAAGC,KAAM,GAC9E,iBAtHI,WACZ,MAAgCC,WAAe,IAA/C,WAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAgCF,WAAe,IAA/C,WAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAsCJ,WAAe,IAArD,WAAOK,EAAP,KAAoBC,EAApB,KAEA,EAA0BN,WAAe,IAAzC,WAAcO,GAAd,WACIC,EAAY,GACZC,EAAW,GAqBf,GAAiC,uBAA7BJ,EAAYK,cACRF,GAAY,OAEZA,GAAY,EAEpB,GAAiC,sBAA7BH,EAAYK,cACRD,GAAW,OAEXA,GAAW,EAgBnB,GAdgB,mBAAAE,EAAAC,OAAA,2EAAAD,EAAA,MAEYE,IAAaC,QAAQ,UAFjC,OAIM,QAFRC,EAFE,SAKJR,EAASQ,GALL,8GAWhBC,GAG8B,cAA1BX,EAAYY,WAA4B,CACxC,IAAIC,EAAWb,EAAYc,MAClBN,IAAaO,QAAQ,QAASF,GAC7BL,IAAaO,QAAQ,YAAa,cAC5C9B,EAAW+B,SAAS,cAYxB,OAAO,gBAACC,EAAA,EAAD,CAAKC,WAAW,SAASC,EAAG,KAAM5B,GAAI,WAAY6B,aAAc,GAAIC,OAAQ,GAC/E,gBAACJ,EAAA,EAAD,CAAKE,EAAE,MAAMG,SAAS,SAClB,gBAACjC,EAAA,EAAD,KACI,gBAACkC,EAAA,EAAD,CAAOC,OAAQC,IAASC,IAAI,eAAeC,KAAK,QAChD,gBAACC,EAAA,EAAD,CAASC,IAAK,EAAGC,SAAU,IAA3B,uBAIJ,gBAACC,EAAA,EAAD,CAAaC,UAAW,EAAGC,UAAW9B,GAClC,gBAAC+B,EAAA,EAAD,CAAOC,GAAG,KACN,gBAACJ,EAAA,EAAYK,MAAb,oBACA,gBAACC,EAAA,EAAD,CAAOC,kBAAmB,YAAaC,QAAQ,aAAaC,KAAK,OAAOC,YAAY,GAChFC,aAAc,SAAChC,GAAD,OAAWb,EAAYa,MAEzC,gBAACqB,EAAA,EAAYY,WAAb,MAGA,gBAACZ,EAAA,EAAYa,aAAb,CAA0BC,SAAU,gBAACC,EAAA,EAAD,CAAoBnB,KAAK,QAA7D,8BAKR,gBAACI,EAAA,EAAD,CAAagB,aAAc,EAAGd,UAAW7B,GACrC,gBAAC8B,EAAA,EAAD,CAAOC,GAAG,KACN,gBAACJ,EAAA,EAAYK,MAAb,cACA,gBAACC,EAAA,EAAD,CAAOC,kBAAmB,YAAaE,KAAK,WAAWD,QAAQ,aAAaE,YAAY,UACpFC,aAAc3C,IAElB,gBAACgC,EAAA,EAAYY,WAAb,MAGA,gBAACZ,EAAA,EAAYa,aAAb,CAA0BC,SAAU,gBAACC,EAAA,EAAD,CAAoBnB,KAAK,QAA7D,qBAMR,gBAACV,EAAA,EAAD,CAAKC,WAAW,SAAS6B,aAAc,GACnC,gBAACC,EAAA,EAAD,CAAQzD,GAAI,aAAc4B,EAAG,MAAOoB,QAAS,QAASU,YAAa,SAAU7B,aAAc,GAAI8B,QAAS,WA/FhHC,IAAMC,IAAI,8CAA+C,CACrDC,OAAQ,CACJC,IAAK,QACL1D,SAAUA,EACVE,SAAUA,KAGbyD,MAAK,SAAUC,GAEZC,QAAQC,IAAIF,EAASG,MACrB1D,EAAeuD,EAASG,WAsFpB,gBAACC,EAAA,EAAD,CAAMC,MAAO,YAAb,gBAWR,MACA,gBAACC,EAAA,EAAD,CAAkBZ,QAAS,kBAAMjE,EAAW+B,SAAS,YACjD,gBAACY,EAAA,EAAD,CAASC,IAAK,EAAGkC,KAAM,CAAE/B,UAAW,GAAKL,KAAM,KAAMkC,MAAO,WAA5D,wBAAyF,gBAACjC,EAAA,EAAD,CAASiC,MAAO,QAASlC,KAAM,MAA/B,mB,kJClJ9F,SAASqC,EAAT,GAAqC,IAAf/E,EAAc,EAAdA,WACnC,EAAgCU,IAAMR,SAAS,IAA/C,WAAO8E,EAAP,KAAiBC,EAAjB,KACA,EAA0BC,cAAXC,GAAf,EAAQ1D,MAAR,EAAe0D,QACf,EAA0BzE,IAAMR,SAAS,IAAzC,WAAO2B,EAAP,KAAcZ,EAAd,KACA,EAAwBP,IAAMR,SAAS,IAAvC,WAAOwE,EAAP,KAAaU,EAAb,KAoBA,SAASC,IACPnB,IAAMC,IAAI,8CAA+C,CACvDC,OAAQ,CACNC,IAAK,SACLxC,MAAOA,EACPyD,OAAQ,SAGThB,MAAK,SAAUC,GACda,EAAQb,EAASG,MAERnD,IAAaO,QAAQ,YAAayD,KAAKC,UAAUjB,EAASG,OACnEO,EAAYV,EAASG,KAAKe,eAvBhB,mBAAApE,EAAAC,OAAA,2EAAAD,EAAA,MAEQE,IAAaC,QAAQ,UAF7B,OAGE,QADRC,EAFM,SAIVR,EAASQ,GAJC,8GAShBC,GA2ZA,MAAoB,eAAhBgD,EAAKgB,QAGL,kBAACvF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQ8B,EAAG,OAAQyD,EAAG,OAAQC,gBAAc,GAC1C,kBAAC5D,EAAA,EAAD,CAAK6D,aAAW,EAAC3D,EAAG,OAAQyD,EAAG,OAAQG,KAAM,IAAKC,eAAe,iBAC/D,mBApYG,WACX,OAAO,kBAAC/D,EAAA,EAAD,CAAK8C,KAAM,CAChBhB,aAAc,GACdlB,IAAK,IAEL,kBAACZ,EAAA,EAAD,CAAKY,IAAK,GAER,kBAACoD,EAAA,EAAD,CAAQC,KAAM,EAAGF,eAAe,gBAAgB7D,EAAG,OACjD,kBAACS,EAAA,EAAD,CAASE,SAAU,IAAnB,WAA6B6B,EAAKwB,MAClC,kBAAC9F,EAAA,EAAD,KACE,kBAAC+F,EAAA,EAAD,CAAUD,KAAK,eAAexD,KAAM,GAAIkC,MAAM,QAAQX,QAAS,kBAtBzE,WACW1C,IAAaO,QAAQ,QAAS,IAC7BP,IAAaO,QAAQ,YAAa,SAC5CsE,WACE,WACEpG,EAAW+B,SAAS,UAEnBsE,KAAKC,MACR,KAc2EC,QAIzE,kBAAC1B,EAAA,EAAD,CAAkBZ,QAAS,kBAAMkB,EAAOH,KACtC,kBAACgB,EAAA,EAAD,CAAQC,KAAM,EAAGO,MAAO,GACtB,kBAAC7D,EAAA,EAAD,CAASE,SAAU,GAAI+B,MAAO,cAA9B,eAAyDF,EAAKe,aAGlE,kBAACzD,EAAA,EAAD,UAiXI,MACA,mBAzWU,WAClB,MAAkC9B,oBAAS,GAA3C,WAAOuG,EAAP,KAAkBC,EAAlB,KAEA,EAAgChG,IAAMR,WAAtC,WAAOyG,EAAP,KAAiBC,EAAjB,KACA,EAAgClG,IAAMR,WAAtC,WAAO2G,EAAP,KAAiBC,EAAjB,KACA,EAAgCpG,IAAMR,WAAtC,WAAO6G,EAAP,KAAiBC,EAAjB,KACA,EAAgCtG,IAAMR,WAAtC,WAAO+G,EAAP,KAAiBC,EAAjB,KACA,EAAgCxG,IAAMR,WAAtC,WAAOiH,EAAP,KAAiBC,EAAjB,KACA,EAAgC1G,IAAMR,WAAtC,WAAOmH,EAAP,KAAiBC,EAAjB,KACA,EAAgC5G,IAAMR,WAAtC,WAAOqH,GAAP,KAAiBC,GAAjB,KACA,GAAgC9G,IAAMR,WAAtC,aAAOuH,GAAP,MAAiBC,GAAjB,MACA,GAAgChH,IAAMR,WAAtC,aAAOyH,GAAP,MAAiBC,GAAjB,MACA,GAAkClH,IAAMR,WAAxC,aAAO2H,GAAP,MAAkBC,GAAlB,MACA,GAAkCpH,IAAMR,WAAxC,aAAO6H,GAAP,MAAkBC,GAAlB,MACA,GAAkCtH,IAAMR,WAAxC,aAAO+H,GAAP,MAAkBC,GAAlB,MACA,GAAkCxH,IAAMR,WAAxC,aAAOiI,GAAP,MAAkBC,GAAlB,MACA,GAAkC1H,IAAMR,WAAxC,aAAOmI,GAAP,MAAkBC,GAAlB,MACA,GAAkC5H,IAAMR,WAAxC,aAAOqI,GAAP,MAAkBC,GAAlB,MA+GA,OA3GA,WAEE,MAAsCtI,qBAAtC,WAEA,GAFA,UAEgB,GAAZyG,EACF,IAAI8B,EAAa,SAEbA,EAAa,IAEnB,GAAgB,GAAZ5B,EACF,IAAI6B,EAAa,SAEbA,EAAa,IAEnB,GAAgB,GAAZ3B,EACF,IAAI4B,EAAa,SAEbA,EAAa,IAEnB,GAAgB,GAAZ1B,EACF,IAAI2B,EAAa,SAEbA,EAAa,IAEnB,GAAgB,GAAZzB,EACF,IAAI0B,EAAa,SAEbA,EAAa,IAGnB,GAAgB,GAAZxB,EACF,IAAIyB,EAAa,SAEbA,EAAa,IAEnB,GAAgB,GAAZvB,GACF,IAAIwB,EAAa,SAEbA,EAAa,IAEnB,GAAgB,GAAZtB,GACF,IAAIuB,EAAa,SAEbA,EAAa,IAEnB,GAAgB,GAAZrB,GACF,IAAIsB,EAAa,SAEbA,EAAa,IAEnB,GAAiB,GAAbpB,GACF,IAAIqB,EAAc,SAEdA,EAAc,IAEpB,GAAiB,GAAbnB,GACF,IAAIoB,EAAc,SAEdA,EAAc,IAEpB,GAAiB,GAAblB,GACF,IAAImB,EAAc,SAEdA,EAAc,IAEpB,GAAiB,GAAbjB,GACF,IAAIkB,EAAc,SAEdA,EAAc,IAEpB,GAAiB,GAAbhB,GACF,IAAIiB,EAAc,SAEdA,EAAc,IAEpB,GAAiB,GAAbf,GACF,IAAIgB,EAAc,SAEdA,EAAc,IAGpBrF,IAAMC,IAAI,8CAA+C,CACvDC,OAAQ,CACNC,IAAK,UACLoB,UAAWf,EAAKe,UAChB+D,UAAW,MACXC,QAAShB,EACTiB,QAAShB,EACTiB,QAAShB,EACTiB,QAAShB,EACTiB,QAAShB,EACTiB,QAAShB,EACTiB,QAAShB,EACTiB,QAAShB,EACTiB,QAAShB,EACTiB,SAAUhB,EACViB,SAAUhB,EACViB,SAAUhB,EACViB,SAAUhB,EACViB,SAAUhB,EACViB,SAAUhB,KAGXjF,MAAK,SAAUC,OAGpBiG,GACO,kBAACxI,EAAA,EAAD,CAAK1B,GAAI,aAAc4B,EAAG,OAAQyD,EAAG,MAAO8E,gBAAiB,GAAIrI,OAAQ,GAC9E,kBAAChC,EAAA,EAAD,KACE,kBAACsK,EAAA,EAAD,CAAYvI,aAAc,GAAIwI,YAAY,EAAMzI,EAAG,MAAOyD,EAAG,GAAI/C,IAAK,EAAGgI,gCAAgC,GACvG,kBAAC5E,EAAA,EAAD,CAAQQ,MAAO,GACb,kBAAC3B,EAAA,EAAD,CAAkBZ,QAAS,kBAAMjE,EAAW+B,SAAS,UACnD,kBAACC,EAAA,EAAD,CAAKE,EAAG,IAAKyD,EAAG,OAAQrF,GAAI,YAAa6B,aAAc,GAAIC,OAAQ,GACjE,kBAAChC,EAAA,EAAD,CAAQwC,IAAK,GACX,kBAACiI,EAAA,EAAD,CAAW3E,KAAK,OAAOxD,KAAM,GAAIkC,MAAM,UACvC,kBAACjC,EAAA,EAAD,CAASE,SAAU,IAAnB,YAIN,kBAACgC,EAAA,EAAD,CAAkBZ,QAAS,kBArNd,EAAA5C,EAAAC,OAAA,kEAAAD,EAAA,MACFyJ,IAA4B,mDAD1B,4EAsNX,kBAAC9I,EAAA,EAAD,CAAKE,EAAG,IAAKyD,EAAG,OAAQrF,GAAI,YAAa6B,aAAc,GAAIC,OAAQ,GACjE,kBAAChC,EAAA,EAAD,CAAQwC,IAAK,GACX,kBAACiI,EAAA,EAAD,CAAW3E,KAAK,SAASxD,KAAM,GAAIkC,MAAM,UACzC,kBAACjC,EAAA,EAAD,CAASE,SAAU,IAAnB,kBAIN,kBAACgC,EAAA,EAAD,CAAkBZ,QAAS,kBAAM8G,MAAM,4FACrC,kBAAC/I,EAAA,EAAD,CAAKE,EAAG,IAAKyD,EAAG,OAAQrF,GAAI,YAAa6B,aAAc,GAAIC,OAAQ,GACjE,kBAAChC,EAAA,EAAD,CAAQwC,IAAK,KACX,kBAACuD,EAAA,EAAD,CAAUD,KAAK,gBAAgBxD,KAAM,GAAIkC,MAAM,UAC/C,kBAACjC,EAAA,EAAD,CAASE,SAAU,IAAnB,iBASZ,kBAACb,EAAA,EAAD,CAAK1B,GAAI,aAAc4B,EAAG,OAAQyD,EAAG,MAAO/C,IAAK,KAAM6H,gBAAiB,GAAIrI,OAAQ,GAClF,kBAAChC,EAAA,EAAD,CAAQwC,IAAK,IACX,kBAACoI,EAAA,EAAD,CAAOC,OAAQxE,EAAWyE,QAAS,kBAAMxE,GAAa,KACpD,kBAACsE,EAAA,EAAMG,QAAP,CAAe9I,SAAS,SAEtB,kBAAC2I,EAAA,EAAMI,KAAP,KACE,kBAAChL,EAAA,EAAD,KACE,kBAAC4F,EAAA,EAAD,CAAQQ,MAAO,GAEb,kBAAC6E,EAAA,EAAD,CAAQ7E,MAAO,GACb,kBAACpG,EAAA,EAAD,KACE,kBAACkL,EAAA,EAAD,CAAQ5I,KAAK,KACXsB,YAAY,SACZuH,SAAU,kBAAM3E,GAAaD,IAC7B6E,UAAW7E,IACb,kBAAChE,EAAA,EAAD,CAASE,SAAU,IAAnB,UAGF,kBAACzC,EAAA,EAAD,KACE,kBAACkL,EAAA,EAAD,CAAQ5I,KAAK,KACXsB,YAAY,SACZuH,SAAU,kBAAMzE,GAAaD,IAC7B2E,UAAW3E,IACb,kBAAClE,EAAA,EAAD,CAASE,SAAU,IAAnB,UAGF,kBAACzC,EAAA,EAAD,KACE,kBAACkL,EAAA,EAAD,CAAQ5I,KAAK,KACXsB,YAAY,SACZuH,SAAU,kBAAMvE,GAAaD,IAC7ByE,UAAWzE,IACb,kBAACpE,EAAA,EAAD,CAASE,SAAU,IAAnB,UAGF,kBAACzC,EAAA,EAAD,KACE,kBAACkL,EAAA,EAAD,CAAQ5I,KAAK,KACXsB,YAAY,SACZuH,SAAU,kBAAMrE,GAAaD,IAC7BuE,UAAWvE,IACb,kBAACtE,EAAA,EAAD,CAASE,SAAU,IAAnB,UAGF,kBAACzC,EAAA,EAAD,KACE,kBAACkL,EAAA,EAAD,CAAQ5I,KAAK,KACXsB,YAAY,SACZuH,SAAU,kBAAMnE,GAAaD,IAC7BqE,UAAWrE,IACb,kBAACxE,EAAA,EAAD,CAASE,SAAU,IAAnB,WAKJ,kBAACwI,EAAA,EAAD,CAAQ7E,MAAO,GACb,kBAACpG,EAAA,EAAD,KACE,kBAACkL,EAAA,EAAD,CAAQ5I,KAAK,KACXsB,YAAY,SACZuH,SAAU,kBAAMjE,GAAaD,IAC7BmE,UAAWnE,IACb,kBAAC1E,EAAA,EAAD,CAASE,SAAU,IAAnB,UAGF,kBAACzC,EAAA,EAAD,KACE,kBAACkL,EAAA,EAAD,CAAQ5I,KAAK,KACXsB,YAAY,SACZuH,SAAU,kBAAM/D,IAAaD,KAC7BiE,UAAWjE,KACb,kBAAC5E,EAAA,EAAD,CAASE,SAAU,IAAnB,UAGF,kBAACzC,EAAA,EAAD,KACE,kBAACkL,EAAA,EAAD,CAAQ5I,KAAK,KACXsB,YAAY,SACZuH,SAAU,kBAAM7D,IAAaD,KAC7B+D,UAAW/D,KACb,kBAAC9E,EAAA,EAAD,CAASE,SAAU,IAAnB,UAGF,kBAACzC,EAAA,EAAD,KACE,kBAACkL,EAAA,EAAD,CAAQ5I,KAAK,KACXsB,YAAY,SACZuH,SAAU,kBAAM3D,IAAaD,KAC7B6D,UAAW7D,KACb,kBAAChF,EAAA,EAAD,CAASE,SAAU,IAAnB,UAGF,kBAACzC,EAAA,EAAD,KACE,kBAACkL,EAAA,EAAD,CAAQ5I,KAAK,KACXsB,YAAY,SACZuH,SAAU,kBAAMzD,IAAcD,KAC9B2D,UAAW3D,KACb,kBAAClF,EAAA,EAAD,CAASE,SAAU,IAAnB,YAKJ,kBAACwI,EAAA,EAAD,CAAQ7E,MAAO,GACb,kBAACpG,EAAA,EAAD,KACE,kBAACkL,EAAA,EAAD,CAAQ5I,KAAK,KACXsB,YAAY,SACZuH,SAAU,kBAAMvD,IAAcD,KAC9ByD,UAAWzD,KACb,kBAACpF,EAAA,EAAD,CAASE,SAAU,IAAnB,WAGF,kBAACzC,EAAA,EAAD,KACE,kBAACkL,EAAA,EAAD,CAAQ5I,KAAK,KACXsB,YAAY,SACZuH,SAAU,kBAAMrD,IAAcD,KAC9BuD,UAAWvD,KACb,kBAACtF,EAAA,EAAD,CAASE,SAAU,IAAnB,WAGF,kBAACzC,EAAA,EAAD,KACE,kBAACkL,EAAA,EAAD,CAAQ5I,KAAK,KACXsB,YAAY,SACZuH,SAAU,kBAAMnD,IAAcD,KAC9BqD,UAAWrD,KACb,kBAACxF,EAAA,EAAD,CAASE,SAAU,IAAnB,WAGF,kBAACzC,EAAA,EAAD,KACE,kBAACkL,EAAA,EAAD,CAAQ5I,KAAK,KACXsB,YAAY,SACZuH,SAAU,kBAAMjD,IAAcD,KAC9BmD,UAAWnD,KACb,kBAAC1F,EAAA,EAAD,CAASE,SAAU,IAAnB,WAGF,kBAACzC,EAAA,EAAD,KACE,kBAACkL,EAAA,EAAD,CAAQ5I,KAAK,KACXsB,YAAY,SACZuH,SAAU,kBAAM/C,IAAcD,KAC9BiD,UAAWjD,KACb,kBAAC5F,EAAA,EAAD,CAASE,SAAU,IAAnB,iBAUd,kBAACmD,EAAA,EAAD,CAAQQ,MAAO,EAAG1B,KAAM,CAAE5C,EAAG,MAAOuJ,aAAc,SAAUxJ,WAAY,WACtE,kBAAC8B,EAAA,EAAD,CAAQE,QAAS,kBAAMyC,GAAa,IAAO1C,YAAa,UAAW5B,OAAQ,EAAG9B,GAAI,cAAe4B,EAAG,MAAOyD,EAAG,IAAKxD,aAAc,IAC/H,kBAAC/B,EAAA,EAAD,KACE,kBAACsL,EAAA,EAAD,CAAQxF,KAAK,aAAaxD,KAAM,GAAIkC,MAAM,YAC1C,kBAACjC,EAAA,EAAD,CAASE,SAAU,GAAI+B,MAAO,WAA9B,WAIJ,kBAACb,EAAA,EAAD,CAAQ3B,OAAQ,EAAG4B,YAAa,YAAa1D,GAAI,gBAAiB4B,EAAG,MAAOyD,EAAG,IAAKxD,aAAc,GAAI8B,QAAS,kBAAM8G,MAAM,4EACzH,kBAAC3K,EAAA,EAAD,KACE,kBAACuL,EAAA,EAAD,CAAazF,KAAK,gBAAgBxD,KAAM,GAAIkC,MAAM,YAClD,kBAACjC,EAAA,EAAD,CAASE,SAAU,GAAI+B,MAAO,WAA9B,SAKN,kBAACoB,EAAA,EAAD,CAAQQ,MAAO,EAAG1B,KAAM,CAAE5C,EAAG,MAAOuJ,aAAc,SAAUxJ,WAAY,WAGtE,kBAAC8B,EAAA,EAAD,CAAQ3B,OAAQ,EAAG4B,YAAa,SAAU1D,GAAI,aAAc4B,EAAG,MAAOyD,EAAG,IAAK/C,IAAK,EAAGT,aAAc,GAAI8B,QAAS,kBAAM8G,MAAM,4EAC3H,kBAAC3K,EAAA,EAAD,KACE,kBAACwL,EAAA,EAAD,CAAc1F,KAAK,SAASxD,KAAM,GAAIkC,MAAM,YAC5C,kBAACjC,EAAA,EAAD,CAASE,SAAU,GAAI+B,MAAO,WAA9B,YAIJ,kBAACb,EAAA,EAAD,CAAQ3B,OAAQ,EAAG4B,YAAa,SAAU1D,GAAI,aAAc4B,EAAG,MAAOyD,EAAG,IAAK/C,IAAK,EAAGT,aAAc,GAAI8B,QAAS,kBAAM8G,MAAM,4EAC3H,kBAAC3K,EAAA,EAAD,KACE,kBAACwL,EAAA,EAAD,CAAc1F,KAAK,cAAcxD,KAAM,GAAIkC,MAAM,YACjD,kBAACjC,EAAA,EAAD,CAASE,SAAU,GAAI+B,MAAO,WAA9B,gBASV,kBAAC5C,EAAA,EAAD,CAAKC,WAAW,SAAS4J,OAAQ,GAC/B,kBAAC7F,EAAA,EAAD,KACE,kBAAC8F,EAAA,EAAD,CAAMC,KAAK,8BAA8BC,YAAU,GACjD,kBAACrJ,EAAA,EAAD,CAASiC,MAAO,QAAS/B,SAAU,IAAnC,0EAgBA,SAWW,OAAfoJ,IAASC,IACX9F,WACE,WACEf,KAECgB,KAAKC,MACR,KAGA,kBAACnG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQE,GAAI,UAAW4B,EAAG,OAAQyD,EAAG,OAAQC,gBAAc,GACzD,kBAACI,EAAA,EAAD,CAAQQ,MAAO,EAAGT,eAAe,UAC/B,kBAACoG,EAAA,EAAD,CAASC,mBAAmB,gBAAgBxH,MAAO,UACnD,kBAACjC,EAAA,EAAD,CAASiC,MAAM,QAAQ/B,SAAS,MAAhC,eAIF,kBAACwJ,EAAA,EAAD,CAAOzJ,IAAK,EAAGV,EAAE,OAAO4D,KAAM,IAAK9B,YAAY,SAASsI,OAAO,QAC7D,kBAACjB,EAAA,EAAD,CAAQ7E,MAAO,EAAG+F,WAAY,EAAGrK,EAAE,OAAOD,WAAW,UACnD,kBAACoK,EAAA,EAAMG,KAAP,CAAY9J,KAAK,OACjB,kBAACiC,EAAA,EAAD,CAAM9B,SAAS,KAAK4J,WAAW,SAASpM,MAAO,CAC7CuE,MAAO,iBADT,SAMA,kBAAC5C,EAAA,EAAD,CAAK0K,MAAO,CACVC,UAAW,UACVtM,MAAO,CACRqM,MAAO,CACL9H,MAAO,kBAJX,8IAQE,kBAACxE,EAAA,EAAD,KACE,kBAAC0L,EAAA,EAAD,CAAMC,KAAK,iEAAX,kDAUd1G,IAEE,kBAAClF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQE,GAAI,UAAW4B,EAAG,OAAQyD,EAAG,OAAQC,gBAAc,GACzD,kBAACI,EAAA,EAAD,CAAQQ,MAAO,EAAGT,eAAe,UAC/B,kBAACoG,EAAA,EAAD,CAASC,mBAAmB,gBAAgBxH,MAAO,UACnD,kBAACjC,EAAA,EAAD,CAASiC,MAAM,QAAQ/B,SAAS,MAAhC,kB,aCzfC,SAAS+J,EAAT,GAAiC,IAAf5M,EAAc,EAAdA,WAC7B,EAAwBU,IAAMR,UAAS,GAAvC,qBA4KA,OACI,kBAACC,EAAA,EAAD,KAEI,kBAACC,EAAA,EAAD,CAAQC,MAAO,CAAEC,GAAI,gBAAkBC,OAAQ,CAAED,GAAI,cAAgBE,GAAI,EAAGC,KAAM,GAE9E,mBA9KZ,WACI,MAAgCC,IAAMR,SAAS,IAA/C,WAAOS,EAAP,KAAiBC,EAAjB,KACA,EAAgCF,IAAMR,SAAS,IAA/C,WAAOW,EAAP,KAAiBC,EAAjB,KACA,EAAgDJ,IAAMR,SAAS,IAA/D,WAAO2M,EAAP,KAAyBC,EAAzB,KACA,EAA0BpM,IAAMR,SAAS,IAAzC,WAAO6M,EAAP,KAAcC,EAAd,KACA,EAAwBtM,IAAMR,SAAS,IAAvC,WAAOgG,EAAP,KAAa+G,EAAb,KACA,EAA8BvM,IAAMR,SAAS,IAA7C,WAAgBgN,GAAhB,WACA,EAAoCxM,IAAMR,UAAS,GAAnD,WAAOiN,EAAP,KAAmBC,EAAnB,KACA,EAA4C1M,IAAMR,UAAS,GAA3D,WAAOmN,EAAP,KAAuBC,EAAvB,KACA,EAAsC5M,IAAMR,SAAS,IAArD,WAAOa,EAAP,KAAoBC,EAApB,KAEA,EAAwBN,IAAMR,UAAS,GAAvC,WAAOqN,EAAP,KAAaC,GAAb,KAsCAhJ,QAAQC,IAAI1D,GACZ,IAAI0M,GAAgBN,EAIpB,OACI,kBAACnL,EAAA,EAAD,CAAKC,WAAW,SAASC,EAAG,KAAM5B,GAAI,WAAY6B,aAAc,GAAIC,OAAQ,GACxE,kBAACJ,EAAA,EAAD,CAAKE,EAAE,MAAMD,WAAW,UACpB,kBAACyL,EAAA,EAAD,CAAUzC,OAAQsC,GACd,kBAAClB,EAAA,EAAD,CAAOnK,EAAE,OAAO8B,YAAY,SAASsI,OAAO,WACxC,kBAACjB,EAAA,EAAD,CAAQ7E,MAAO,EAAG+F,WAAY,EAAGrK,EAAE,QAC/B,kBAACmJ,EAAA,EAAD,CAAQkB,WAAY,EAAG/F,MAAO,EAAGvE,WAAW,SAAS8D,eAAe,iBAChE,kBAACsF,EAAA,EAAD,CAAQ7E,MAAO,EAAG+F,WAAY,EAAGtK,WAAW,UAExC,kBAACU,EAAA,EAAD,CAASC,IAAK,EAAGC,SAAU,IAA3B,kEAYxB,kBAACb,EAAA,EAAD,CAAKE,EAAE,MAAMG,SAAS,SAClB,kBAACjC,EAAA,EAAD,KACI,kBAACuC,EAAA,EAAD,CAASC,IAAK,EAAGC,SAAU,IAA3B,gBAGJ,kBAACC,EAAA,EAAD,CAAaC,UAAW,GACpB,kBAACE,EAAA,EAAD,CAAOC,GAAG,KACN,kBAACJ,EAAA,EAAYK,MAAb,cACA,kBAACC,EAAA,EAAD,CAAOuK,aAAczH,EAAM7C,kBAAmB,YAAaC,QAAQ,aAAaC,KAAK,OAAOC,YAAY,GACpGC,aAAc,SAAChC,GAAD,OAAWwL,EAAQxL,MAErC,kBAACqB,EAAA,EAAYY,WAAb,QAOR,kBAACZ,EAAA,EAAD,CAAaC,UAAW,EAAGC,UAAWqK,GAClC,kBAACpK,EAAA,EAAD,CAAOC,GAAG,KACN,kBAACJ,EAAA,EAAYK,MAAb,oBACA,kBAACC,EAAA,EAAD,CAAOuK,aAAchN,EAAU0C,kBAAmB,YAAaC,QAAQ,aAAaC,KAAK,OAAOC,YAAY,GACxGC,aAAc,SAAChC,GAAD,OAAWb,EAAYa,MAEzC,kBAACqB,EAAA,EAAYY,WAAb,MAGA,kBAACZ,EAAA,EAAYa,aAAb,CAA0BC,SAAU,kBAACC,EAAA,EAAD,CAAoBnB,KAAK,QAA7D,6BAMR,kBAACI,EAAA,EAAD,CAAaC,UAAW,GACpB,kBAACE,EAAA,EAAD,CAAOC,GAAG,KACN,kBAACJ,EAAA,EAAYK,MAAb,gBACA,kBAACC,EAAA,EAAD,CAAOuK,aAAcZ,EAAO1J,kBAAmB,YAAaC,QAAQ,aAAaC,KAAK,SAASC,YAAY,GACvGC,aAAc,SAAChC,GAAD,OAAWuL,EAASvL,MAEtC,kBAACqB,EAAA,EAAYY,WAAb,MAGA,kBAACZ,EAAA,EAAYa,aAAb,CAA0BC,SAAU,kBAACC,EAAA,EAAD,CAAoBnB,KAAK,QAA7D,8BAMR,kBAACI,EAAA,EAAD,CAAagB,aAAc,EAAGd,UAAWyK,IACrC,kBAACxK,EAAA,EAAD,CAAOC,GAAG,KACN,kBAACJ,EAAA,EAAYK,MAAb,cACA,kBAACC,EAAA,EAAD,CAAOC,kBAAmB,YAAaE,KAAK,WAAWD,QAAQ,aAAaE,YAAY,UACpFC,aAAc3C,IAElB,kBAACgC,EAAA,EAAYY,WAAb,MAGA,kBAACZ,EAAA,EAAYa,aAAb,CAA0BC,SAAU,kBAACC,EAAA,EAAD,CAAoBnB,KAAK,QAA7D,4BAMR,kBAACI,EAAA,EAAD,CAAagB,aAAc,GACvB,kBAACb,EAAA,EAAD,CAAOC,GAAG,KACN,kBAACJ,EAAA,EAAYK,MAAb,wBACA,kBAACC,EAAA,EAAD,CAAOuK,aAAcd,EAAkBxJ,kBAAmB,YAAaE,KAAK,WAAWD,QAAQ,aAAaE,YAAY,UACpHC,aAAcqJ,IAElB,kBAAChK,EAAA,EAAYY,WAAb,QAOR,kBAAC1B,EAAA,EAAD,CAAKC,WAAW,SAAS6B,aAAc,GACnC,kBAACC,EAAA,EAAD,CAAQzD,GAAI,aAAc4B,EAAG,MAAOoB,QAAS,QAASU,YAAa,SAAU7B,aAAc,GAAI8B,QAAS,kBA1IxH,WACQpD,GAAYgM,GACZK,EAAW,0BACXE,GAAc,KAEdA,GAAc,GACdlJ,IAAMC,IAAI,8CAA+C,CACrDC,OAAQ,CACJC,IAAK,UACL1D,SAAUA,EACVE,SAAUA,EACVqF,KAAMA,EACN6G,MAAOA,KAGVzI,MAAK,SAAUC,GAEZC,QAAQC,IAAIF,EAASG,MACrB1D,EAAeuD,EAASG,SAEC,uBAA7B3D,EAAYK,cACZkM,GAAkB,IAElBA,GAAkB,GAClBE,IAASD,GACTnH,WACI,WACIpG,EAAW+B,SAAS,UAEnBsE,KAAKC,MACV,OA4G8GsH,KAC1G,kBAACjJ,EAAA,EAAD,CAAMC,MAAO,YAAb,eAqBZ,QCnLD,SAASiJ,EAAT,GAA8B,EAAd7N,WAAe,IAC1C,EAAwBU,IAAMR,SAAS,MAAvC,WAAOwE,EAAP,KAAaU,EAAb,KAWA,GAVgB,mBAAA/D,EAAAC,OAAA,2EAAAD,EAAA,MAEYE,IAAaC,QAAQ,cAFjC,OAGM,QADRC,EAFE,SAIJ2D,EAAQ3D,GAJJ,8GAShBC,GACY,MAARgD,EAAc,CACd,IAAIoJ,EAAKvI,KAAKwI,MAAMrJ,GA0FpB,OAzFAF,QAAQC,IAAIqJ,GA0FR,kBAAC3N,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQC,MAAO,CAAEC,GAAI,gBAAkBC,OAAQ,CAAED,GAAI,cAAgBE,GAAI,EAAGC,KAAM,GAC9E,mBAvFZ,WACI,MAAgCC,IAAMR,SAAS,IAA/C,WAAiBU,GAAjB,WACA,EAAgCF,IAAMR,SAAS,IAA/C,WAAiBY,GAAjB,WACA,EAAsCJ,IAAMR,SAAS,IAArD,WAEA,OAFA,UAGI,kBAAC8B,EAAA,EAAD,CAAKC,WAAW,SAASC,EAAG,KAAM5B,GAAI,WAAY6B,aAAc,EAAGC,OAAQ,GACvE,kBAACJ,EAAA,EAAD,CAAKE,EAAE,MAAMG,SAAS,SAGtB,kBAACS,EAAA,EAAD,CAAaC,UAAW,GAChB,kBAACE,EAAA,EAAD,CAAOC,GAAG,KACN,kBAACJ,EAAA,EAAYK,MAAb,cACA,kBAACC,EAAA,EAAD,CAAOC,kBAAmB,YAAaC,QAAQ,aAAaC,KAAK,OAAOC,YAAY,GAChFC,aAAc,SAAChC,GAAD,OAAWb,EAAYa,IAAQkM,aAAcG,EAAG5H,OAElE,kBAACpD,EAAA,EAAYY,WAAb,MAGA,kBAACZ,EAAA,EAAYa,aAAb,CAA0BC,SAAU,kBAACC,EAAA,EAAD,CAAoBnB,KAAK,QAA7D,8BAKR,kBAACI,EAAA,EAAD,CAAaC,UAAW,GACpB,kBAACE,EAAA,EAAD,CAAOC,GAAG,KACN,kBAACJ,EAAA,EAAYK,MAAb,oBACA,kBAACC,EAAA,EAAD,CAAOC,kBAAmB,YAAaC,QAAQ,aAAaC,KAAK,OAAOC,YAAY,GAChFC,aAAc,SAAChC,GAAD,OAAWb,EAAYa,IAAQkM,aAAcG,EAAGnN,WAElE,kBAACmC,EAAA,EAAYY,WAAb,MAGA,kBAACZ,EAAA,EAAYa,aAAb,CAA0BC,SAAU,kBAACC,EAAA,EAAD,CAAoBnB,KAAK,QAA7D,8BAKR,kBAACI,EAAA,EAAD,CAAaC,UAAW,GACpB,kBAACE,EAAA,EAAD,CAAOC,GAAG,KACN,kBAACJ,EAAA,EAAYK,MAAb,gBACA,kBAACC,EAAA,EAAD,CAAOC,kBAAmB,YAAaC,QAAQ,aAAaC,KAAK,OAAOC,YAAY,GAChFC,aAAc,SAAChC,GAAD,OAAWb,EAAYa,IAAQkM,aAAcG,EAAGf,QAElE,kBAACjK,EAAA,EAAYY,WAAb,MAGA,kBAACZ,EAAA,EAAYa,aAAb,CAA0BC,SAAU,kBAACC,EAAA,EAAD,CAAoBnB,KAAK,QAA7D,8BAKR,kBAACI,EAAA,EAAD,CAAagB,aAAc,GACvB,kBAACb,EAAA,EAAD,CAAOC,GAAG,KACN,kBAACJ,EAAA,EAAYK,MAAb,cACA,kBAACC,EAAA,EAAD,CAAOC,kBAAmB,YAAaE,KAAK,WAAWD,QAAQ,aAAaE,YAAY,UACpFC,aAAc3C,IAElB,kBAACgC,EAAA,EAAYY,WAAb,MAGA,kBAACZ,EAAA,EAAYa,aAAb,CAA0BC,SAAU,kBAACC,EAAA,EAAD,CAAoBnB,KAAK,QAA7D,qBAMR,kBAACV,EAAA,EAAD,CAAKC,WAAW,SAAS6B,aAAc,GACnC,kBAACC,EAAA,EAAD,CAAQzD,GAAI,aAAc4B,EAAG,MAAOoB,QAAS,QAASU,YAAa,SAAU7B,aAAc,GAAI8B,QAAS,kBAAM8G,MAAM,4EAChH,kBAACpG,EAAA,EAAD,CAAMC,MAAO,YAAb,uBAkBZ,QAKZ,OACI,kBAACzE,EAAA,EAAD,MChHZ,IAAM8C,EAAQ+K,cAUC,SAASC,IAEtB,MAAqC/N,mBAAS,SAA9C,WAAOgO,EAAP,KAAoBC,EAApB,KA6BA,OA5BAC,qBAAU,YACQ,mBAAA/M,EAAAC,OAAA,2EAAAD,EAAA,MAEQE,IAAaC,QAAQ,cAF7B,OAGE,QADRC,EAFM,SAIV0M,EAAc1M,GAJJ,8GAShBC,MAmBA,iBAdF,WACE,OACE,gBAAC2M,EAAA,EAAD,KACE,gBAAC,EAAMC,UAAP,CAAiBC,iBAAkBL,GACjC,gBAAC,EAAMM,OAAP,CAActI,KAAK,QAAQuI,UAAW1O,EAAO2O,QAAS,CAAEC,aAAa,KACrE,gBAAC,EAAMH,OAAP,CAActI,KAAK,aAAauI,UAAW1J,EAAY2J,QAAS,CAAEC,aAAa,EAAOC,mBAAmB,KACzG,gBAAC,EAAMJ,OAAP,CAActI,KAAK,SAASuI,UAAW7B,EAAQ8B,QAAS,CAAEC,aAAa,EAAOC,mBAAmB,KACjG,gBAAC,EAAMJ,OAAP,CAActI,KAAK,OAAOuI,UAAWZ,EAAMa,QAAS,CAAEC,aAAa,EAAMC,mBAAmB,EAAMC,gBAAiB,SAAUC,YAAa,eAOhJ,Q","file":"static/js/app.1c46a4ea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arduino.8769f0a4.png\";","import * as React from 'react';\nimport {\n    Text,\n    Link,\n    HStack,\n    Center,\n    Heading,\n    Switch,\n    useColorMode,\n    NativeBaseProvider,\n    extendTheme,\n    VStack,\n    Code,\n    Box,\n    FormControl,\n    Input,\n    Stack,\n    WarningOutlineIcon,\n    ZStack,\n    Image,\n    Button,\n    Container,\n    useToast\n} from \"native-base\";\nimport axios from 'axios';\nimport arduino from '../img/arduino.png';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { TouchableOpacity } from \"react-native\";\n\n\nexport default function Login({ navigation }) {\n    const toast = useToast();\n    const [data, setData] = useState('');\n\n    const BoxForm = () => {\n        const [username, setUsername] = React.useState(\"\");\n        const [password, setPassword] = React.useState(\"\");\n        const [statusLogin, setstatusLogin] = React.useState(\"\");\n\n        const [token, setToken] = React.useState(\"\");\n        var userError = ''\n        var pwsError = ''\n\n\n        function Login() {\n            axios.get('https://apiarduinowebcontrol.herokuapp.com/', {\n                params: {\n                    req: 'login',\n                    username: username,\n                    password: password\n                }\n            })\n                .then(function (response) {\n                    // manipula o sucesso da requisição\n                    console.log(response.data);\n                    setstatusLogin(response.data)\n                })\n        }\n\n\n\n\n        if (statusLogin.warning_error == \"User does not exist\") {\n            var userError = true;\n        } else {\n            var userError = false;\n        }\n        if (statusLogin.warning_error == \"Incorrect password\") {\n            var pwsError = true;\n        } else {\n            var pwsError = false;\n        }\n        const getData = async () => {\n            try {\n                const value = await AsyncStorage.getItem('token')\n\n                if (value !== null) {\n                    setToken(value)\n\n                }\n            } catch (e) {\n            }\n        }\n        getData()\n\n\n        if (statusLogin.loginState == \"Login done\") {\n            var gettoken = statusLogin.token;\n            var gg = AsyncStorage.setItem('token', gettoken)\n            var lgg = AsyncStorage.setItem('LoginSave', 'DashBorard')\n            navigation.navigate('DashBorard')\n\n\n\n        }\n\n\n\n\n\n\n\n        return <Box alignItems=\"center\" w={'xs'} bg={'light.50'} borderRadius={10} shadow={5}>\n            <Box w=\"90%\" maxWidth=\"300px\">\n                <Center>\n                    <Image source={arduino} alt=\"Inicial Logo\" size=\"200\" />\n                    <Heading top={1} fontSize={22}>ArduinoHomeControl</Heading>\n\n                </Center>\n\n                <FormControl marginTop={5} isInvalid={userError}>\n                    <Stack mx=\"4\" >\n                        <FormControl.Label >Usuário </FormControl.Label>\n                        <Input borderBottomColor={'light.200'} variant=\"underlined\" type=\"user\" placeholder=\"\"\n                            onChangeText={(value) => setUsername(value)}\n                        ></Input>\n                        <FormControl.HelperText>\n\n                        </FormControl.HelperText>\n                        <FormControl.ErrorMessage leftIcon={<WarningOutlineIcon size=\"xs\" />}>\n                            Usuário não existe\n                        </FormControl.ErrorMessage>\n                    </Stack>\n                </FormControl>\n                <FormControl marginBottom={5} isInvalid={pwsError}>\n                    <Stack mx=\"4\" >\n                        <FormControl.Label >Senha</FormControl.Label>\n                        <Input borderBottomColor={'light.200'} type=\"password\" variant=\"underlined\" placeholder=\"*******\"\n                            onChangeText={setPassword} />\n\n                        <FormControl.HelperText>\n\n                        </FormControl.HelperText>\n                        <FormControl.ErrorMessage leftIcon={<WarningOutlineIcon size=\"xs\" />}>\n                            Senha incorreta\n                        </FormControl.ErrorMessage>\n                    </Stack>\n                </FormControl>\n\n                <Box alignItems=\"center\" marginBottom={5}>\n                    <Button bg={'indigo.800'} w={'50%'} variant={\"solid\"} colorScheme={'indigo'} borderRadius={20} onPress={() => Login()}>\n                        <Text color={'light.50'}>Entrar</Text>\n                    </Button>\n                </Box>\n\n            </Box>\n        </Box>;\n\n    };\n    return (\n        <NativeBaseProvider>\n            <Center _dark={{ bg: \"blueGray.900\" }} _light={{ bg: \"violet.900\" }} px={4} flex={1}>\n                <BoxForm></BoxForm>\n                <TouchableOpacity onPress={() => navigation.navigate('SingUp')}>\n                    <Heading top={4} _web={{ marginTop: 4 }} size={'xs'} color={'#f5f3ff'}>Não possui conta? <Heading color={'white'} size={'xs'}>Clique aqui</Heading></Heading>\n                </TouchableOpacity>\n            </Center>\n        </NativeBaseProvider>\n    );\n\n}","import React from \"react\";\nimport { useEffect, useState } from \"react\"\nimport { NativeBaseProvider, Collapse, Alert, Modal, Actionsheet, Spinner, useClipboard, Box, Text, Badge, Divider, Heading, VStack, Switch, FormControl, Input, Link, Button, Icon, HStack, Center, Pressable, View, Container, ZStack, ScrollView, Toast } from \"native-base\";\nimport { TouchableOpacity, Platform } from \"react-native\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport axios from \"axios\";\nimport * as WebBrowser from 'expo-web-browser';\n\nimport { Ionicons, AntDesign, FontAwesome, FontAwesome5, Entypo } from '@expo/vector-icons';\n\nexport default function DashBorard({ navigation }) {\n  const [copyText, setCopyText] = React.useState(\"\");\n  const { value, onCopy } = useClipboard();\n  const [token, setToken] = React.useState(\"\");\n  const [data, setData] = React.useState(\"\");\n\n  const OpenGithubDocs = async () => {\n    let result = await WebBrowser.openBrowserAsync('https://github.com/birdra1n/arduinohomecontrol');\n  };\n\n\n\n\n  const getData = async () => {\n    try {\n      const value = await AsyncStorage.getItem('token')\n      if (value !== null) {\n        setToken(value)\n      }\n    } catch (e) {\n    }\n  }\n  getData()\n\n  function GetDataAccont() {\n    axios.get('https://apiarduinowebcontrol.herokuapp.com/', {\n      params: {\n        req: 'painel',\n        token: token,\n        filter: 'all'\n      }\n    })\n      .then(function (response) {\n        setData(response.data)\n\n        var ll = AsyncStorage.setItem('data_user', JSON.stringify(response.data))\n        setCopyText(response.data.arduinoid)\n      })\n  }\n  function Exit() {\n    var gg = AsyncStorage.setItem('token', '')\n    var lgg = AsyncStorage.setItem('LoginSave', 'Login')\n    setTimeout(\n      function () {\n        navigation.navigate('Login')\n      }\n        .bind(this),\n      2000\n    );\n  }\n\n  const Head = () => {\n    return <Box _web={{\n      marginBottom: 41,\n      top: 4\n    }}>\n      <Box top={5}>\n\n        <HStack left={3} justifyContent=\"space-between\" w={'90%'}>\n          <Heading fontSize={30}>Olá, {data.name}</Heading>\n          <Center>\n            <Ionicons name=\"exit-outline\" size={30} color=\"black\" onPress={() => Exit()} />\n          </Center>\n        </HStack>\n\n        <TouchableOpacity onPress={() => onCopy(copyText)}>\n          <HStack left={3} space={1}>\n            <Heading fontSize={15} color={'violet.600'}>Arduino ID: {data.arduinoid}</Heading>\n          </HStack>\n        </TouchableOpacity>\n        <Box >\n\n        </Box>\n      </Box>\n\n    </Box>;\n  };\n\n\n  const OptionsBody = () => {\n    const [showModal, setShowModal] = useState(false);\n\n    const [Switch_1, setSwitch_1] = React.useState();\n    const [Switch_2, setSwitch_2] = React.useState();\n    const [Switch_3, setSwitch_3] = React.useState();\n    const [Switch_4, setSwitch_4] = React.useState();\n    const [Switch_5, setSwitch_5] = React.useState();\n    const [Switch_6, setSwitch_6] = React.useState();\n    const [Switch_7, setSwitch_7] = React.useState();\n    const [Switch_8, setSwitch_8] = React.useState();\n    const [Switch_9, setSwitch_9] = React.useState();\n    const [Switch_10, setSwitch_10] = React.useState();\n    const [Switch_11, setSwitch_11] = React.useState();\n    const [Switch_12, setSwitch_12] = React.useState();\n    const [Switch_13, setSwitch_13] = React.useState();\n    const [Switch_14, setSwitch_14] = React.useState();\n    const [Switch_15, setSwitch_15] = React.useState();\n\n\n\n    function SetandGetDataLights() {\n\n      const [data_lights, setdata_lights] = useState();\n\n      if (Switch_1 == true) {\n        var light_opt1 = \"1\"\n      } else {\n        var light_opt1 = \"0\"\n      }\n      if (Switch_2 == true) {\n        var light_opt2 = \"1\"\n      } else {\n        var light_opt2 = \"0\"\n      }\n      if (Switch_3 == true) {\n        var light_opt3 = \"1\"\n      } else {\n        var light_opt3 = \"0\"\n      }\n      if (Switch_4 == true) {\n        var light_opt4 = \"1\"\n      } else {\n        var light_opt4 = \"0\"\n      }\n      if (Switch_5 == true) {\n        var light_opt5 = \"1\"\n      } else {\n        var light_opt5 = \"0\"\n      }\n\n      if (Switch_6 == true) {\n        var light_opt6 = \"1\"\n      } else {\n        var light_opt6 = \"0\"\n      }\n      if (Switch_7 == true) {\n        var light_opt7 = \"1\"\n      } else {\n        var light_opt7 = \"0\"\n      }\n      if (Switch_8 == true) {\n        var light_opt8 = \"1\"\n      } else {\n        var light_opt8 = \"0\"\n      }\n      if (Switch_9 == true) {\n        var light_opt9 = \"1\"\n      } else {\n        var light_opt9 = \"0\"\n      }\n      if (Switch_10 == true) {\n        var light_opt10 = \"1\"\n      } else {\n        var light_opt10 = \"0\"\n      }\n      if (Switch_11 == true) {\n        var light_opt11 = \"1\"\n      } else {\n        var light_opt11 = \"0\"\n      }\n      if (Switch_12 == true) {\n        var light_opt12 = \"1\"\n      } else {\n        var light_opt12 = \"0\"\n      }\n      if (Switch_13 == true) {\n        var light_opt13 = \"1\"\n      } else {\n        var light_opt13 = \"0\"\n      }\n      if (Switch_14 == true) {\n        var light_opt14 = \"1\"\n      } else {\n        var light_opt14 = \"0\"\n      }\n      if (Switch_15 == true) {\n        var light_opt15 = \"1\"\n      } else {\n        var light_opt15 = \"0\"\n      }\n\n      axios.get('https://apiarduinowebcontrol.herokuapp.com/', {\n        params: {\n          req: 'arduino',\n          arduinoid: data.arduinoid,\n          setLights: 'yes',\n          light_1: light_opt1,\n          light_2: light_opt2,\n          light_3: light_opt3,\n          light_4: light_opt4,\n          light_5: light_opt5,\n          light_6: light_opt6,\n          light_7: light_opt7,\n          light_8: light_opt8,\n          light_9: light_opt9,\n          light_10: light_opt10,\n          light_11: light_opt11,\n          light_12: light_opt12,\n          light_13: light_opt13,\n          light_14: light_opt14,\n          light_15: light_opt15,\n        }\n      })\n        .then(function (response) {\n        })\n    }\n    SetandGetDataLights()\n    return <Box bg={'violet.800'} w={'100%'} h={'81%'} borderTopRadius={45} shadow={5}>\n      <Center>\n        <ScrollView borderRadius={10} horizontal={true} w={'90%'} h={81} top={3} showsHorizontalScrollIndicator={false}>\n          <HStack space={4}>\n            <TouchableOpacity onPress={() => navigation.navigate(\"Acct\")}>\n              <Box w={100} h={'100%'} bg={'light.100'} borderRadius={10} shadow={5}>\n                <Center top={4}>\n                  <AntDesign name=\"user\" size={35} color=\"black\" />\n                  <Heading fontSize={10}>Conta</Heading>\n                </Center>\n              </Box>\n            </TouchableOpacity>\n            <TouchableOpacity onPress={() => OpenGithubDocs()}>\n              <Box w={100} h={'100%'} bg={'light.100'} borderRadius={10} shadow={5}>\n                <Center top={4}>\n                  <AntDesign name=\"github\" size={35} color=\"black\" />\n                  <Heading fontSize={10}>Docs GitHub</Heading>\n                </Center>\n              </Box>\n            </TouchableOpacity>\n            <TouchableOpacity onPress={() => alert('Informações sobre o arduino conectado ainda não está disponível no BETA')}>\n              <Box w={100} h={'100%'} bg={'light.100'} borderRadius={10} shadow={5}>\n                <Center top={3.5}>\n                  <Ionicons name=\"hardware-chip\" size={35} color=\"black\" />\n                  <Heading fontSize={10}>Arduino</Heading>\n                </Center>\n              </Box>\n            </TouchableOpacity>\n          </HStack>\n        </ScrollView>\n\n      </Center>\n\n      <Box bg={'violet.700'} w={'100%'} h={'80%'} top={'5%'} borderTopRadius={45} shadow={5} >\n        <Center top={50}>\n          <Modal isOpen={showModal} onClose={() => setShowModal(false)}>\n            <Modal.Content maxWidth=\"300px\">\n\n              <Modal.Body>\n                <Center>\n                  <HStack space={9}>\n\n                    <VStack space={2}>\n                      <Center>\n                        <Switch size=\"md\"\n                          colorScheme=\"violet\"\n                          onChange={() => setSwitch_1(!Switch_1)}\n                          isChecked={Switch_1} />\n                        <Heading fontSize={10}>Luz 1</Heading>\n                      </Center>\n\n                      <Center>\n                        <Switch size=\"md\"\n                          colorScheme=\"violet\"\n                          onChange={() => setSwitch_2(!Switch_2)}\n                          isChecked={Switch_2} />\n                        <Heading fontSize={10}>Luz 2</Heading>\n                      </Center>\n\n                      <Center>\n                        <Switch size=\"md\"\n                          colorScheme=\"violet\"\n                          onChange={() => setSwitch_3(!Switch_3)}\n                          isChecked={Switch_3} />\n                        <Heading fontSize={10}>Luz 3</Heading>\n                      </Center>\n\n                      <Center>\n                        <Switch size=\"md\"\n                          colorScheme=\"violet\"\n                          onChange={() => setSwitch_4(!Switch_4)}\n                          isChecked={Switch_4} />\n                        <Heading fontSize={10}>Luz 4</Heading>\n                      </Center>\n\n                      <Center>\n                        <Switch size=\"md\"\n                          colorScheme=\"violet\"\n                          onChange={() => setSwitch_5(!Switch_5)}\n                          isChecked={Switch_5} />\n                        <Heading fontSize={10}>Luz 5</Heading>\n                      </Center>\n\n                    </VStack>\n\n                    <VStack space={2}>\n                      <Center>\n                        <Switch size=\"md\"\n                          colorScheme=\"violet\"\n                          onChange={() => setSwitch_6(!Switch_6)}\n                          isChecked={Switch_6} />\n                        <Heading fontSize={10}>Luz 6</Heading>\n                      </Center>\n\n                      <Center>\n                        <Switch size=\"md\"\n                          colorScheme=\"violet\"\n                          onChange={() => setSwitch_7(!Switch_7)}\n                          isChecked={Switch_7} />\n                        <Heading fontSize={10}>Luz 7</Heading>\n                      </Center>\n\n                      <Center>\n                        <Switch size=\"md\"\n                          colorScheme=\"violet\"\n                          onChange={() => setSwitch_8(!Switch_8)}\n                          isChecked={Switch_8} />\n                        <Heading fontSize={10}>Luz 8</Heading>\n                      </Center>\n\n                      <Center>\n                        <Switch size=\"md\"\n                          colorScheme=\"violet\"\n                          onChange={() => setSwitch_9(!Switch_9)}\n                          isChecked={Switch_9} />\n                        <Heading fontSize={10}>Luz 9</Heading>\n                      </Center>\n\n                      <Center>\n                        <Switch size=\"md\"\n                          colorScheme=\"violet\"\n                          onChange={() => setSwitch_10(!Switch_10)}\n                          isChecked={Switch_10} />\n                        <Heading fontSize={10}>Luz 10</Heading>\n                      </Center>\n\n                    </VStack>\n\n                    <VStack space={2}>\n                      <Center>\n                        <Switch size=\"md\"\n                          colorScheme=\"violet\"\n                          onChange={() => setSwitch_11(!Switch_11)}\n                          isChecked={Switch_11} />\n                        <Heading fontSize={10}>Luz 11</Heading>\n                      </Center>\n\n                      <Center>\n                        <Switch size=\"md\"\n                          colorScheme=\"violet\"\n                          onChange={() => setSwitch_12(!Switch_12)}\n                          isChecked={Switch_12} />\n                        <Heading fontSize={10}>Luz 12</Heading>\n                      </Center>\n\n                      <Center>\n                        <Switch size=\"md\"\n                          colorScheme=\"violet\"\n                          onChange={() => setSwitch_13(!Switch_13)}\n                          isChecked={Switch_13} />\n                        <Heading fontSize={10}>Luz 13</Heading>\n                      </Center>\n\n                      <Center>\n                        <Switch size=\"md\"\n                          colorScheme=\"violet\"\n                          onChange={() => setSwitch_14(!Switch_14)}\n                          isChecked={Switch_14} />\n                        <Heading fontSize={10}>Luz 14</Heading>\n                      </Center>\n\n                      <Center>\n                        <Switch size=\"md\"\n                          colorScheme=\"violet\"\n                          onChange={() => setSwitch_15(!Switch_15)}\n                          isChecked={Switch_15} />\n                        <Heading fontSize={10}>Luz 15</Heading>\n                      </Center>\n                    </VStack>\n                  </HStack>\n                </Center>\n              </Modal.Body>\n            </Modal.Content>\n          </Modal>\n\n\n          <HStack space={9} _web={{ w: '60%', alignContent: 'center', alignItems: 'center' }}>\n            <Button onPress={() => setShowModal(true)} colorScheme={'warning'} shadow={1} bg={'warning.500'} w={'40%'} h={120} borderRadius={10} >\n              <Center>\n                <Entypo name=\"light-bulb\" size={54} color=\"#f5f5f4\" />\n                <Heading fontSize={20} color={'#f5f5f4'}>Luzes</Heading>\n              </Center>\n            </Button>\n\n            <Button shadow={1} colorScheme={'lightBlue'} bg={'lightBlue.500'} w={'40%'} h={120} borderRadius={10} onPress={() => alert('Essa função não está disponível na versão pública')}>\n              <Center>\n                <FontAwesome name=\"thermometer-4\" size={54} color=\"#f5f5f4\" />\n                <Heading fontSize={20} color={'#f5f5f4'}>AC</Heading>\n              </Center>\n            </Button>\n\n          </HStack>\n          <HStack space={9} _web={{ w: '60%', alignContent: 'center', alignItems: 'center' }}>\n\n\n            <Button shadow={1} colorScheme={'indigo'} bg={'indigo.500'} w={'40%'} h={120} top={5} borderRadius={10} onPress={() => alert('Essa função não está disponível na versão pública')}>\n              <Center >\n                <FontAwesome5 name=\"faucet\" size={54} color=\"#f5f5f4\" />\n                <Heading fontSize={20} color={'#f5f5f4'}>Jardim</Heading>\n              </Center>\n            </Button>\n\n            <Button shadow={1} colorScheme={'indigo'} bg={'indigo.600'} w={'40%'} h={120} top={5} borderRadius={10} onPress={() => alert('Essa função não está disponível na versão pública')}>\n              <Center >\n                <FontAwesome5 name=\"door-closed\" size={54} color=\"#f5f5f4\" />\n                <Heading fontSize={20} color={'#f5f5f4'}>Garagem</Heading>\n              </Center>\n            </Button>\n          </HStack>\n\n        </Center>\n\n      </Box>\n\n      <Box alignItems=\"center\" bottom={3}>\n        <HStack>\n          <Link href=\"https://github.com/birdra1n\" isExternal>\n            <Heading color={'white'} fontSize={15}>Developed by BirdRa1n 👨🏻‍💻</Heading>\n          </Link>\n        </HStack>\n      </Box>\n\n    </Box>;\n\n  };\n\n  if (data.warning == \"valid token\") {\n\n    return (\n      <NativeBaseProvider>\n        <Center w={'100%'} h={'100%'} safeAreaBottom>\n          <Box safeAreaTop w={'100%'} h={'100%'} maxW={580} justifyContent=\"space-between\">\n            <Head></Head>\n            <OptionsBody></OptionsBody>\n          </Box>\n        </Center>\n\n      </NativeBaseProvider>\n    )\n  }\n\n  else {\n\n\n    if (Platform.OS == \"web\") {\n      setTimeout(\n        function () {\n          GetDataAccont()\n        }\n          .bind(this),\n        8000\n      );\n      return (\n        <NativeBaseProvider>\n          <Center bg={'#581c87'} w={'100%'} h={'100%'} safeAreaBottom>\n            <HStack space={2} justifyContent=\"center\">\n              <Spinner accessibilityLabel=\"Loading posts\" color={'white'} />\n              <Heading color=\"white\" fontSize=\"md\">\n                Carregando\n              </Heading>\n            </HStack>\n            <Alert top={3} w=\"100%\" maxW={300} colorScheme=\"violet\" status=\"info\">\n              <VStack space={1} flexShrink={1} w=\"100%\" alignItems=\"center\">\n                <Alert.Icon size=\"md\" />\n                <Text fontSize=\"md\" fontWeight=\"medium\" _dark={{\n                  color: \"coolGray.800\"\n                }}>\n                  Aviso\n                </Text>\n\n                <Box _text={{\n                  textAlign: \"center\"\n                }} _dark={{\n                  _text: {\n                    color: \"coolGray.600\"\n                  }\n                }}>\n                  Você está utilizando a versão WEB. Avisamos que essa versão é apenas para demonstração e não funciona corretamente!\n                  <Center>\n                    <Link href=\"https://expo.dev/@dariojunior.dev/projects/ArduinoHomeControl\">Baixe o app para melhor experiência</Link>\n                  </Center>\n                </Box>\n              </VStack>\n            </Alert>\n          </Center>\n        </NativeBaseProvider>\n      );\n\n    } else {\n      GetDataAccont()\n      return (\n        <NativeBaseProvider>\n          <Center bg={'#581c87'} w={'100%'} h={'100%'} safeAreaBottom>\n            <HStack space={2} justifyContent=\"center\">\n              <Spinner accessibilityLabel=\"Loading posts\" color={'white'} />\n              <Heading color=\"white\" fontSize=\"md\">\n                Carregando\n              </Heading>\n            </HStack>\n          </Center>\n        </NativeBaseProvider>\n      )\n    }\n  }\n}\n//              <Badge bg={'#FF0000'} borderRadius={10} _text={{ fontSize: 8, color: 'white' }}>Em desenvolvimento</Badge>\n","import { NativeBaseProvider, Collapse, IconButton, CloseIcon, Alert, Stack, WarningOutlineIcon, Image, Modal, Actionsheet, Spinner, useClipboard, Box, Text, Badge, Divider, Heading, VStack, Switch, FormControl, Input, Link, Button, Icon, HStack, Center, Pressable, View, Container, ZStack, ScrollView, Toast } from \"native-base\";\nimport React from \"react\";\nimport axios from 'axios';\nimport arduino from '../img/arduino.png';\nimport { useState } from 'react';\n\n\nexport default function SingUp({ navigation }) {\n    const [show, setShow] = React.useState(false);\n\n\n    function BoxForm() {\n        const [username, setUsername] = React.useState(\"\");\n        const [password, setPassword] = React.useState(\"\");\n        const [password_confirm, setPassword_confirm] = React.useState(\"\");\n        const [email, setEmail] = React.useState(\"\");\n        const [name, setName] = React.useState(\"\");\n        const [message, setMessage] = React.useState(\"\");\n        const [dangerform, setdangerform] = React.useState(false);\n        const [dangerformUser, setdangerformUser] = React.useState(false);\n        const [statusLogin, setstatusLogin] = React.useState(\"\");\n\n        const [show, setShow] = React.useState(false);\n\n\n        function Create() {\n            if (password != password_confirm) {\n                setMessage('senhas não conferem');\n                setdangerform(true)\n            } else {\n                setdangerform(false)\n                axios.get('https://apiarduinowebcontrol.herokuapp.com/', {\n                    params: {\n                        req: 'newuser',\n                        username: username,\n                        password: password,\n                        name: name,\n                        email: email\n                    }\n                })\n                    .then(function (response) {\n                        // manipula o sucesso da requisição\n                        console.log(response.data);\n                        setstatusLogin(response.data)\n                    })\n                if (statusLogin.warning_error == \"User already exists\") {\n                    setdangerformUser(true);\n                } else {\n                    setdangerformUser(false);\n                    setShow(!show)\n                    setTimeout(\n                        function () {\n                            navigation.navigate('Login')\n                        }\n                            .bind(this),\n                        2000\n                    );\n                }\n            }\n        }\n        console.log(statusLogin)\n        var passwordError = dangerform;\n\n\n\n        return (\n            <Box alignItems=\"center\" w={'xs'} bg={'light.50'} borderRadius={10} shadow={5}>\n                <Box w=\"90%\" alignItems=\"center\">\n                    <Collapse isOpen={show}>\n                        <Alert w=\"100%\" colorScheme=\"violet\" status=\"success\">\n                            <VStack space={2} flexShrink={1} w=\"100%\">\n                                <VStack flexShrink={1} space={2} alignItems=\"center\" justifyContent=\"space-between\">\n                                    <VStack space={1} flexShrink={1} alignItems=\"center\">\n\n                                        <Heading top={0} fontSize={20}>\n                                            Bem vindo! sua conta foi criada com sucesso 🥳\n                                        </Heading>\n\n\n                                    </VStack>\n                                </VStack>\n                            </VStack>\n                        </Alert>\n                    </Collapse>\n\n                </Box>\n                <Box w=\"90%\" maxWidth=\"300px\">\n                    <Center>\n                        <Heading top={1} fontSize={22}>Cadastre-se</Heading>\n                    </Center>\n\n                    <FormControl marginTop={5} >\n                        <Stack mx=\"4\" >\n                            <FormControl.Label >Nome </FormControl.Label>\n                            <Input defaultValue={name} borderBottomColor={'light.200'} variant=\"underlined\" type=\"user\" placeholder=\"\"\n                                onChangeText={(value) => setName(value)}\n                            ></Input>\n                            <FormControl.HelperText>\n\n                            </FormControl.HelperText>\n\n                        </Stack>\n                    </FormControl>\n\n                    <FormControl marginTop={5} isInvalid={dangerformUser}>\n                        <Stack mx=\"4\" >\n                            <FormControl.Label >Usuário </FormControl.Label>\n                            <Input defaultValue={username} borderBottomColor={'light.200'} variant=\"underlined\" type=\"user\" placeholder=\"\"\n                                onChangeText={(value) => setUsername(value)}\n                            ></Input>\n                            <FormControl.HelperText>\n\n                            </FormControl.HelperText>\n                            <FormControl.ErrorMessage leftIcon={<WarningOutlineIcon size=\"xs\" />}>\n                                Usuário já existe\n                            </FormControl.ErrorMessage>\n                        </Stack>\n                    </FormControl>\n\n                    <FormControl marginTop={5} >\n                        <Stack mx=\"4\" >\n                            <FormControl.Label >E-mail </FormControl.Label>\n                            <Input defaultValue={email} borderBottomColor={'light.200'} variant=\"underlined\" type=\"e-mail\" placeholder=\"\"\n                                onChangeText={(value) => setEmail(value)}\n                            ></Input>\n                            <FormControl.HelperText>\n\n                            </FormControl.HelperText>\n                            <FormControl.ErrorMessage leftIcon={<WarningOutlineIcon size=\"xs\" />}>\n                                Usuário não existe\n                            </FormControl.ErrorMessage>\n                        </Stack>\n                    </FormControl>\n\n                    <FormControl marginBottom={5} isInvalid={passwordError}>\n                        <Stack mx=\"4\" >\n                            <FormControl.Label >Senha</FormControl.Label>\n                            <Input borderBottomColor={'light.200'} type=\"password\" variant=\"underlined\" placeholder=\"*******\"\n                                onChangeText={setPassword} />\n\n                            <FormControl.HelperText>\n\n                            </FormControl.HelperText>\n                            <FormControl.ErrorMessage leftIcon={<WarningOutlineIcon size=\"xs\" />}>\n                                Senhas não conferem\n                            </FormControl.ErrorMessage>\n                        </Stack>\n                    </FormControl>\n\n                    <FormControl marginBottom={5} >\n                        <Stack mx=\"4\" >\n                            <FormControl.Label >Confirmar senha</FormControl.Label>\n                            <Input defaultValue={password_confirm} borderBottomColor={'light.200'} type=\"password\" variant=\"underlined\" placeholder=\"*******\"\n                                onChangeText={setPassword_confirm} />\n\n                            <FormControl.HelperText>\n\n                            </FormControl.HelperText>\n\n                        </Stack>\n                    </FormControl>\n\n                    <Box alignItems=\"center\" marginBottom={5}>\n                        <Button bg={'indigo.800'} w={'50%'} variant={\"solid\"} colorScheme={'indigo'} borderRadius={20} onPress={() => Create()}>\n                            <Text color={'light.50'}>Criar</Text>\n                        </Button>\n                    </Box>\n\n                </Box>\n\n\n\n\n\n            </Box>);\n    }\n\n\n\n\n    return (\n        <NativeBaseProvider>\n\n            <Center _dark={{ bg: \"blueGray.900\" }} _light={{ bg: \"violet.900\" }} px={4} flex={1}>\n\n                <BoxForm></BoxForm>\n            </Center>\n        </NativeBaseProvider>\n    );\n}","import React from \"react\";\nimport { useEffect, useState } from \"react\"\nimport { NativeBaseProvider, Collapse, IconButton, CloseIcon, Alert, Stack, WarningOutlineIcon, Image, Modal, Actionsheet, Spinner, useClipboard, Box, Text, Badge, Divider, Heading, VStack, Switch, FormControl, Input, Link, Button, Icon, HStack, Center, Pressable, View, Container, ZStack, ScrollView, Toast } from \"native-base\";\nimport { TouchableOpacity, Platform } from \"react-native\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport axios from \"axios\";\nexport default function Acct({ navigation }) {\n    const [data, setData] = React.useState(null);\n    const getData = async () => {\n        try {\n            const value = await AsyncStorage.getItem('data_user')\n            if (value !== null) {\n                setData(value)\n            }\n        } catch (e) {\n        }\n    }\n    getData()\n    if (data != null) {\n        var dd = JSON.parse(data)\n        console.log(dd)\n\n\n\n\n        function BoxForm() {\n            const [username, setUsername] = React.useState(\"\");\n            const [password, setPassword] = React.useState(\"\");\n            const [statusLogin, setstatusLogin] = React.useState(\"\");\n\n            return (\n                <Box alignItems=\"center\" w={'xs'} bg={'light.50'} borderRadius={5} shadow={5}>\n                    <Box w=\"90%\" maxWidth=\"300px\">\n                 \n\n                    <FormControl marginTop={5} >\n                            <Stack mx=\"4\" >\n                                <FormControl.Label >Nome </FormControl.Label>\n                                <Input borderBottomColor={'light.200'} variant=\"underlined\" type=\"user\" placeholder=\"\"\n                                    onChangeText={(value) => setUsername(value)} defaultValue={dd.name}\n                                ></Input>\n                                <FormControl.HelperText>\n\n                                </FormControl.HelperText>\n                                <FormControl.ErrorMessage leftIcon={<WarningOutlineIcon size=\"xs\" />}>\n                                    Usuário não existe\n                                </FormControl.ErrorMessage>\n                            </Stack>\n                        </FormControl>\n                        <FormControl marginTop={5} >\n                            <Stack mx=\"4\" >\n                                <FormControl.Label >Usuário </FormControl.Label>\n                                <Input borderBottomColor={'light.200'} variant=\"underlined\" type=\"user\" placeholder=\"\"\n                                    onChangeText={(value) => setUsername(value)} defaultValue={dd.username}\n                                ></Input>\n                                <FormControl.HelperText>\n\n                                </FormControl.HelperText>\n                                <FormControl.ErrorMessage leftIcon={<WarningOutlineIcon size=\"xs\" />}>\n                                    Usuário não existe\n                                </FormControl.ErrorMessage>\n                            </Stack>\n                        </FormControl>\n                        <FormControl marginTop={5} >\n                            <Stack mx=\"4\" >\n                                <FormControl.Label >E-mail </FormControl.Label>\n                                <Input borderBottomColor={'light.200'} variant=\"underlined\" type=\"user\" placeholder=\"\"\n                                    onChangeText={(value) => setUsername(value)} defaultValue={dd.email}\n                                ></Input>\n                                <FormControl.HelperText>\n\n                                </FormControl.HelperText>\n                                <FormControl.ErrorMessage leftIcon={<WarningOutlineIcon size=\"xs\" />}>\n                                    Usuário não existe\n                                </FormControl.ErrorMessage>\n                            </Stack>\n                        </FormControl>\n                        <FormControl marginBottom={5} >\n                            <Stack mx=\"4\" >\n                                <FormControl.Label >Senha</FormControl.Label>\n                                <Input borderBottomColor={'light.200'} type=\"password\" variant=\"underlined\" placeholder=\"*******\"\n                                    onChangeText={setPassword} />\n\n                                <FormControl.HelperText>\n\n                                </FormControl.HelperText>\n                                <FormControl.ErrorMessage leftIcon={<WarningOutlineIcon size=\"xs\" />}>\n                                    Senha incorreta\n                                </FormControl.ErrorMessage>\n                            </Stack>\n                        </FormControl>\n\n                        <Box alignItems=\"center\" marginBottom={5}>\n                            <Button bg={'indigo.900'} w={'50%'} variant={\"solid\"} colorScheme={'indigo'} borderRadius={20} onPress={() => alert('Essa função não está disponível na versão pública')}>\n                                <Text color={'light.50'}>Alterar dados</Text>\n                            </Button>\n                        </Box>\n\n                    </Box>\n                </Box>\n            );\n        }\n\n\n\n\n\n\n\n        return (\n            <NativeBaseProvider>\n                <Center _dark={{ bg: \"blueGray.900\" }} _light={{ bg: \"violet.900\" }} px={4} flex={1}>\n                    <BoxForm></BoxForm>\n                </Center>\n            </NativeBaseProvider>\n        )\n    } else {\n        return (\n            <NativeBaseProvider>\n            </NativeBaseProvider>\n        )\n    }\n\n}\n\n","import * as React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nconst Stack = createNativeStackNavigator();\n\n//screens\nimport Login from './components/screens/Login';\nimport DashBorard from './components/screens/dashboard';\nimport SingUp from './components/screens/SingUp';\nimport Acct from './components/screens/Acct';\n\n\n\nexport default function App() {\n\n  const [loginStatus, setLoginState] = useState('Login');\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const value = await AsyncStorage.getItem('LoginSave')\n        if (value !== null) {\n          setLoginState(value)\n        }\n      } catch (e) {\n      }\n    }\n    getData();\n\n\n  })\n  \n  function CheckState(){\n    return (\n      <NavigationContainer>\n        <Stack.Navigator initialRouteName={loginStatus}>\n          <Stack.Screen name=\"Login\" component={Login} options={{ headerShown: false }} />\n          <Stack.Screen name=\"DashBorard\" component={DashBorard} options={{ headerShown: false, headerBackVisible: false }} />\n          <Stack.Screen name=\"SingUp\" component={SingUp} options={{ headerShown: false, headerBackVisible: false }} />\n          <Stack.Screen name=\"Acct\" component={Acct} options={{ headerShown: true, headerBackVisible: true, headerBackTitle: 'Voltar', headerTitle: \"Conta\" }} />\n  \n  \n        </Stack.Navigator>\n      </NavigationContainer>)\n  }\n  return(\n    <CheckState></CheckState>\n  )\n\n\n}\n\n"],"sourceRoot":""}