{"version":3,"sources":["components/img/arduino.png","components/screens/Login.js","components/api.js","components/screens/dashboard.js","components/screens/SingUp.js","App.js"],"names":["module","exports","Login","navigation","useToast","useState","NativeBaseProvider","Center","_dark","bg","_light","px","flex","React","username","setUsername","password","setPassword","statusLogin","setstatusLogin","setToken","userError","pwsError","warning_error","a","async","AsyncStorage","getItem","value","getData","loginState","gettoken","token","setItem","navigate","Box","alignItems","w","borderRadius","shadow","maxWidth","Image","source","arduino","alt","size","Heading","top","fontSize","FormControl","marginTop","isInvalid","Stack","mx","Label","Input","borderBottomColor","variant","type","placeholder","onChangeText","HelperText","ErrorMessage","leftIcon","WarningOutline","marginBottom","Button","colorScheme","onPress","axios","get","params","req","then","response","console","log","data","Text","color","TouchableOpacity","_web","create","baseURL","DashBorard","setData","copyText","setCopyText","useEffect","useClipboard","onCopy","warning","h","safeAreaBottom","safeAreaTop","maxW","justifyContent","left","HStack","name","Ionicons","setTimeout","bind","this","Exit","space","arduinoid","showModal","setShowModal","Switch_1","setSwitch_1","Switch_2","setSwitch_2","Switch_3","setSwitch_3","Switch_4","setSwitch_4","Switch_5","setSwitch_5","Switch_6","setSwitch_6","Switch_7","setSwitch_7","Switch_8","setSwitch_8","Switch_9","setSwitch_9","Switch_10","setSwitch_10","Switch_11","setSwitch_11","Switch_12","setSwitch_12","Switch_13","setSwitch_13","Switch_14","setSwitch_14","Switch_15","setSwitch_15","borderTopRadius","ScrollView","horizontal","showsHorizontalScrollIndicator","AntDesign","Modal","isOpen","onClose","Content","Body","VStack","Switch","onChange","isChecked","alignContent","Entypo","Badge","_text","FontAwesome","FontAwesome5","bottom","Link","href","isExternal","filter","Spinner","accessibilityLabel","SingUp","password_confirm","setPassword_confirm","email","setEmail","setName","setMessage","dangerform","setdangerform","dangerformUser","setdangerformUser","show","setShow","passwordError","Collapse","Alert","status","flexShrink","defaultValue","Create","createNativeStackNavigator","App","loginStatus","setLoginState","NavigationContainer","Navigator","initialRouteName","Screen","component","options","headerShown","headerBackVisible"],"mappings":"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","file":"static/js/app.7b144642.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arduino.8769f0a4.png\";","import * as React from 'react';\nimport {\n    Text,\n    Link,\n    HStack,\n    Center,\n    Heading,\n    Switch,\n    useColorMode,\n    NativeBaseProvider,\n    extendTheme,\n    VStack,\n    Code,\n    Box,\n    FormControl,\n    Input,\n    Stack,\n    WarningOutlineIcon,\n    ZStack,\n    Image,\n    Button,\n    Container,\n    useToast\n} from \"native-base\";\nimport axios from 'axios';\nimport arduino from '../img/arduino.png';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { TouchableOpacity } from \"react-native\";\n\n\nexport default function Login({ navigation }) {\n    const toast = useToast();\n    const [data, setData] = useState('');\n\n    const BoxForm = () => {\n        const [username, setUsername] = React.useState(\"\");\n        const [password, setPassword] = React.useState(\"\");\n        const [statusLogin, setstatusLogin] = React.useState(\"\");\n\n        const [token, setToken] = React.useState(\"\");\n        var userError = ''\n        var pwsError = ''\n\n\n        function Login() {\n            axios.get('https://apiarduinowebcontrol.herokuapp.com/', {\n                params: {\n                    req: 'login',\n                    username: username,\n                    password: password\n                }\n            })\n                .then(function (response) {\n                    // manipula o sucesso da requisição\n                    console.log(response.data);\n                    setstatusLogin(response.data)\n                })\n        }\n\n\n\n\n        if (statusLogin.warning_error == \"User does not exist\") {\n            var userError = true;\n        } else {\n            var userError = false;\n        }\n        if (statusLogin.warning_error == \"Incorrect password\") {\n            var pwsError = true;\n        } else {\n            var pwsError = false;\n        }\n        const getData = async () => {\n            try {\n                const value = await AsyncStorage.getItem('token')\n\n                if (value !== null) {\n                    setToken(value)\n\n                }\n            } catch (e) {\n            }\n        }\n        getData()\n\n\n        if (statusLogin.loginState == \"Login done\") {\n            var gettoken = statusLogin.token;\n            var gg = AsyncStorage.setItem('token', gettoken)\n            var lgg = AsyncStorage.setItem('LoginSave', 'DashBorard')\n            navigation.navigate('DashBorard')\n\n\n\n        }\n\n\n\n\n\n\n\n        return <Box alignItems=\"center\" w={'xs'} bg={'light.50'} borderRadius={10} shadow={5}>\n            <Box w=\"90%\" maxWidth=\"300px\">\n                <Center>\n                    <Image source={arduino} alt=\"Inicial Logo\" size=\"200\" />\n                    <Heading top={1} fontSize={22}>ArduinoHomeControl</Heading>\n\n                </Center>\n\n                <FormControl marginTop={5} isInvalid={userError}>\n                    <Stack mx=\"4\" >\n                        <FormControl.Label >Usuário </FormControl.Label>\n                        <Input borderBottomColor={'light.200'} variant=\"underlined\" type=\"user\" placeholder=\"\"\n                            onChangeText={(value) => setUsername(value)}\n                        ></Input>\n                        <FormControl.HelperText>\n\n                        </FormControl.HelperText>\n                        <FormControl.ErrorMessage leftIcon={<WarningOutlineIcon size=\"xs\" />}>\n                            Usuário não existe\n                        </FormControl.ErrorMessage>\n                    </Stack>\n                </FormControl>\n                <FormControl marginBottom={5} isInvalid={pwsError}>\n                    <Stack mx=\"4\" >\n                        <FormControl.Label >Senha</FormControl.Label>\n                        <Input borderBottomColor={'light.200'} type=\"password\" variant=\"underlined\" placeholder=\"*******\"\n                            onChangeText={setPassword} />\n\n                        <FormControl.HelperText>\n\n                        </FormControl.HelperText>\n                        <FormControl.ErrorMessage leftIcon={<WarningOutlineIcon size=\"xs\" />}>\n                            Senha incorreta\n                        </FormControl.ErrorMessage>\n                    </Stack>\n                </FormControl>\n\n                <Box alignItems=\"center\" marginBottom={5}>\n                    <Button bg={'indigo.800'} w={'50%'} variant={\"solid\"} colorScheme={'indigo'} borderRadius={20} onPress={() => Login()}>\n                        <Text color={'light.50'}>Entrar</Text>\n                    </Button>\n                </Box>\n\n            </Box>\n        </Box>;\n\n    };\n    return (\n        <NativeBaseProvider>\n            <Center _dark={{ bg: \"blueGray.900\" }} _light={{ bg: \"violet.900\" }} px={4} flex={1}>\n                <BoxForm></BoxForm>\n                <TouchableOpacity onPress={() => navigation.navigate('SingUp')}>\n                    <Heading top={4} _web={{ marginTop: 4 }} size={'xs'} color={'#f5f3ff'}>Não possui conta? <Heading color={'white'} size={'xs'}>Clique aqui</Heading></Heading>\n                </TouchableOpacity>\n            </Center>\n        </NativeBaseProvider>\n    );\n\n}","import axios from 'axios';\nconst api = axios.create({\n  baseURL: 'https://apiarduinowebcontrol.herokuapp.com/',\n});\nexport default api;","import React from \"react\";\nimport { NativeBaseProvider, Modal, Actionsheet, Spinner, useClipboard, Box, Text, Badge, Divider, Heading, VStack, Switch, FormControl, Input, Link, Button, Icon, HStack, Center, Pressable, View, Container, ZStack, ScrollView, Toast } from \"native-base\";\nimport { MaterialCommunityIcons, MaterialIcons } from \"@expo/vector-icons\";\nimport { TouchableOpacity } from \"react-native\";\nimport { Entypo } from '@expo/vector-icons';\nimport { FontAwesome5 } from '@expo/vector-icons';\nimport { FontAwesome } from '@expo/vector-icons';\n\nimport { AntDesign } from '@expo/vector-icons';\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport axios from \"axios\";\nimport api from \"../api\";\nimport { useDisclose } from \"native-base\";\nimport { useToast } from \"native-base\";\nimport { Ionicons } from '@expo/vector-icons';\n\n\nexport default function DashBorard({ navigation }) {\n  const [token, setToken] = React.useState(\"\");\n  const [data, setData] = React.useState(\"\");\n  const [copyText, setCopyText] = React.useState(\"\");\n\n\n\n  const getData = async () => {\n    try {\n      const value = await AsyncStorage.getItem('token')\n      if (value !== null) {\n        setToken(value)\n      }\n    } catch (e) {\n    }\n  }\n\n  function DataHome() {\n    axios.get('https://apiarduinowebcontrol.herokuapp.com/', {\n      params: {\n        req: 'painel',\n        token: token,\n        filter: 'all'\n      }\n    })\n      .then(function (response) {\n        console.log(response.data);\n        setData(response.data)\n        setCopyText(response.data.arduinoid)\n      })\n  }\n\n  useEffect(() => {\n    getData();\n  })\n  function CorpoBody() {\n    const { value, onCopy } = useClipboard();\n\n    function Exit() {\n      var gg = AsyncStorage.setItem('token', '')\n      var lgg = AsyncStorage.setItem('LoginSave', 'Login')\n      setTimeout(\n        function () {\n          navigation.navigate('Login')\n        }\n          .bind(this),\n        2000\n      );\n    }\n\n\n    function Head() {\n      return (\n        <Box>\n          <Box left={3} top={5}>\n\n            <HStack justifyContent=\"space-between\" w={'90%'}>\n              <Heading fontSize={30}>Olá, {data.name}</Heading>\n              <Center>\n                <Ionicons name=\"exit-outline\" size={30} color=\"black\" onPress={() => Exit()} />\n              </Center>\n            </HStack>\n\n            <TouchableOpacity onPress={() => onCopy(copyText)}>\n              <HStack space={1}>\n                <Heading fontSize={15} color={'violet.600'}>Arduino ID: {data.arduinoid}</Heading>\n              </HStack>\n            </TouchableOpacity>\n\n          </Box>\n        </Box>\n      )\n    }\n\n\n    function BodyOptions() {\n      const [showModal, setShowModal] = useState(false);\n      const [Switch_1, setSwitch_1] = useState();\n      const [Switch_2, setSwitch_2] = useState();\n      const [Switch_3, setSwitch_3] = useState();\n      const [Switch_4, setSwitch_4] = useState();\n      const [Switch_5, setSwitch_5] = useState();\n      const [Switch_6, setSwitch_6] = useState();\n      const [Switch_7, setSwitch_7] = useState();\n      const [Switch_8, setSwitch_8] = useState();\n      const [Switch_9, setSwitch_9] = useState();\n      const [Switch_10, setSwitch_10] = useState();\n      const [Switch_11, setSwitch_11] = useState();\n      const [Switch_12, setSwitch_12] = useState();\n      const [Switch_13, setSwitch_13] = useState();\n      const [Switch_14, setSwitch_14] = useState();\n      const [Switch_15, setSwitch_15] = useState();\n\n\n\n\n\n\n      return (\n\n        <Box bg={'violet.800'} w={'100%'} h={'81%'} borderTopRadius={45} shadow={5}>\n          <Center>\n            <ScrollView borderRadius={10} horizontal={true} w={'80%'} h={81} top={3} showsHorizontalScrollIndicator={false}>\n              <HStack space={4}>\n                <Box w={100} h={'100%'} bg={'light.100'} borderRadius={10} shadow={5}>\n                  <Center top={4}>\n                    <Heading fontSize={30}>0</Heading>\n                    <Heading fontSize={10}>Luzes ligadas</Heading>\n                  </Center>\n                </Box>\n                <Box w={100} h={'100%'} bg={'light.100'} borderRadius={10} shadow={5}>\n                  <Center top={4}>\n                    <AntDesign name=\"user\" size={35} color=\"black\" />\n                    <Heading fontSize={10}>Conta</Heading>\n                  </Center>\n                </Box>\n                <Box w={100} h={'100%'} bg={'light.100'} borderRadius={10} shadow={5}>\n                  <Center top={4}>\n                    <AntDesign name=\"github\" size={35} color=\"black\" />\n                    <Heading fontSize={10}>Docs GitHub</Heading>\n                  </Center>\n                </Box>\n                <Box w={100} h={'100%'} bg={'light.100'} borderRadius={10} shadow={5}>\n                  <Center top={4}>\n                    <AntDesign name=\"setting\" size={35} color=\"black\" />\n                    <Heading fontSize={10}>Configurações</Heading>\n                  </Center>\n                </Box>\n              </HStack>\n            </ScrollView>\n\n          </Center>\n\n          <Box bg={'violet.700'} w={'100%'} h={'80%'} top={'5%'} borderTopRadius={45} shadow={5} >\n            <Center top={50}>\n              <Modal isOpen={showModal} onClose={() => setShowModal(false)}>\n                <Modal.Content maxWidth=\"400px\">\n\n                  <Modal.Body>\n                    <Center>\n                      <HStack space={9}>\n\n                        <VStack space={2}>\n                          <Center>\n                            <Switch size=\"md\"\n                              colorScheme=\"violet\"\n                              onChange={() => setSwitch_1(!Switch_1)}\n                              isChecked={Switch_1} />\n                            <Heading fontSize={10}>Luz 1</Heading>\n                          </Center>\n\n                          <Center>\n                            <Switch size=\"md\"\n                              colorScheme=\"violet\"\n                              onChange={() => setSwitch_2(!Switch_2)}\n                              isChecked={Switch_2} />\n                            <Heading fontSize={10}>Luz 2</Heading>\n                          </Center>\n\n                          <Center>\n                            <Switch size=\"md\"\n                              colorScheme=\"violet\"\n                              onChange={() => setSwitch_3(!Switch_3)}\n                              isChecked={Switch_3} />\n                            <Heading fontSize={10}>Luz 3</Heading>\n                          </Center>\n\n                          <Center>\n                            <Switch size=\"md\"\n                              colorScheme=\"violet\"\n                              onChange={() => setSwitch_4(!Switch_4)}\n                              isChecked={Switch_4} />\n                            <Heading fontSize={10}>Luz 4</Heading>\n                          </Center>\n\n                          <Center>\n                            <Switch size=\"md\"\n                              colorScheme=\"violet\"\n                              onChange={() => setSwitch_5(!Switch_5)}\n                              isChecked={Switch_5} />\n                            <Heading fontSize={10}>Luz 5</Heading>\n                          </Center>\n\n                        </VStack>\n\n                        <VStack space={2}>\n                          <Center>\n                            <Switch size=\"md\"\n                              colorScheme=\"violet\"\n                              onChange={() => setSwitch_6(!Switch_6)}\n                              isChecked={Switch_6} />\n                            <Heading fontSize={10}>Luz 6</Heading>\n                          </Center>\n\n                          <Center>\n                            <Switch size=\"md\"\n                              colorScheme=\"violet\"\n                              onChange={() => setSwitch_7(!Switch_7)}\n                              isChecked={Switch_7} />\n                            <Heading fontSize={10}>Luz 7</Heading>\n                          </Center>\n\n                          <Center>\n                            <Switch size=\"md\"\n                              colorScheme=\"violet\"\n                              onChange={() => setSwitch_8(!Switch_8)}\n                              isChecked={Switch_8} />\n                            <Heading fontSize={10}>Luz 8</Heading>\n                          </Center>\n\n                          <Center>\n                            <Switch size=\"md\"\n                              colorScheme=\"violet\"\n                              onChange={() => setSwitch_9(!Switch_9)}\n                              isChecked={Switch_9} />\n                            <Heading fontSize={10}>Luz 9</Heading>\n                          </Center>\n\n                          <Center>\n                            <Switch size=\"md\"\n                              colorScheme=\"violet\"\n                              onChange={() => setSwitch_10(!Switch_10)}\n                              isChecked={Switch_10} />\n                            <Heading fontSize={10}>Luz 10</Heading>\n                          </Center>\n\n                        </VStack>\n\n                        <VStack space={2}>\n                          <Center>\n                            <Switch size=\"md\"\n                              colorScheme=\"violet\"\n                              onChange={() => setSwitch_11(!Switch_11)}\n                              isChecked={Switch_11} />\n                            <Heading fontSize={10}>Luz 11</Heading>\n                          </Center>\n\n                          <Center>\n                            <Switch size=\"md\"\n                              colorScheme=\"violet\"\n                              onChange={() => setSwitch_12(!Switch_12)}\n                              isChecked={Switch_12} />\n                            <Heading fontSize={10}>Luz 12</Heading>\n                          </Center>\n\n                          <Center>\n                            <Switch size=\"md\"\n                              colorScheme=\"violet\"\n                              onChange={() => setSwitch_13(!Switch_13)}\n                              isChecked={Switch_13} />\n                            <Heading fontSize={10}>Luz 13</Heading>\n                          </Center>\n\n                          <Center>\n                            <Switch size=\"md\"\n                              colorScheme=\"violet\"\n                              onChange={() => setSwitch_14(!Switch_14)}\n                              isChecked={Switch_14} />\n                            <Heading fontSize={10}>Luz 14</Heading>\n                          </Center>\n\n                          <Center>\n                            <Switch size=\"md\"\n                              colorScheme=\"violet\"\n                              onChange={() => setSwitch_15(!Switch_15)}\n                              isChecked={Switch_15} />\n                            <Heading fontSize={10}>Luz 15</Heading>\n                          </Center>\n\n                        </VStack>\n\n                      </HStack>\n                    </Center>\n\n                  </Modal.Body>\n                </Modal.Content>\n              </Modal>\n\n\n              <HStack space={9} _web={{ w: '60%', alignContent: 'center', alignItems: 'center' }}>\n\n\n\n\n\n\n\n\n\n\n\n\n\n                <Button onPress={() => setShowModal(true)} colorScheme={'warning'} shadow={1} bg={'warning.500'} w={'40%'} h={120} borderRadius={10} >\n                  <Center>\n                    <Entypo name=\"light-bulb\" size={54} color=\"#f5f5f4\" />\n                    <Heading fontSize={20} color={'#f5f5f4'}>Luzes</Heading>\n                    <Badge bg={'#FF0000'} borderRadius={10} _text={{ fontSize: 8, color: 'white' }}>Em desenvolvimento</Badge>\n                  </Center>\n                </Button>\n\n                <Button shadow={1} colorScheme={'lightBlue'} bg={'lightBlue.500'} w={'40%'} h={120} borderRadius={10}>\n                  <Center>\n                    <FontAwesome name=\"thermometer-4\" size={54} color=\"#f5f5f4\" />\n                    <Heading fontSize={20} color={'#f5f5f4'}>AC</Heading>\n                  </Center>\n                  <Badge bg={'#FF0000'} borderRadius={10} _text={{ fontSize: 8, color: 'white' }}>Em desenvolvimento</Badge>\n                </Button>\n\n              </HStack>\n\n              <Button shadow={1} colorScheme={'indigo'} bg={'indigo.500'} w={'90%'} h={120} top={5} borderRadius={10}>\n                <Center >\n                  <FontAwesome5 name=\"faucet\" size={54} color=\"#f5f5f4\" />\n                  <Heading fontSize={20} color={'#f5f5f4'}>Jardim</Heading>\n                  <Badge bg={'#FF0000'} borderRadius={10} _text={{ fontSize: 8, color: 'white' }}>Em desenvolvimento</Badge>\n                </Center>\n              </Button>\n\n            </Center>\n\n          </Box>\n\n          <Box alignItems=\"center\" bottom={3}>\n            <HStack>\n              <Link href=\"https://github.com/birdra1n\" isExternal>\n                <Heading color={'white'} fontSize={15}>Developed by BirdRa1n 👨🏻‍💻</Heading>\n              </Link>\n            </HStack>\n          </Box>\n\n        </Box>\n\n      )\n    }\n\n\n    if (data.warning == \"valid token\") {\n\n      return (\n        <Center w={'100%'} h={'100%'} safeAreaBottom>\n\n          <Box safeAreaTop w={'100%'} h={'100%'} maxW={580} justifyContent=\"space-between\">\n            <Head></Head>\n            <BodyOptions />\n          </Box>\n\n        </Center>\n      );\n\n    } else {\n      DataHome();\n      return (\n        <Center bg={'#581c87'} w={'100%'} h={'100%'} safeAreaBottom>\n          <HStack space={2} justifyContent=\"center\">\n            <Spinner accessibilityLabel=\"Loading posts\" color={'white'} />\n            <Heading color=\"white\" fontSize=\"md\">\n              Carregando\n            </Heading>\n          </HStack>\n        </Center>\n      )\n    }\n\n  }\n\n\n\n  return (\n    <NativeBaseProvider>\n      <CorpoBody></CorpoBody>\n    </NativeBaseProvider>\n  );\n\n};\n","import { NativeBaseProvider, Collapse, IconButton, CloseIcon, Alert, Stack, WarningOutlineIcon, Image, Modal, Actionsheet, Spinner, useClipboard, Box, Text, Badge, Divider, Heading, VStack, Switch, FormControl, Input, Link, Button, Icon, HStack, Center, Pressable, View, Container, ZStack, ScrollView, Toast } from \"native-base\";\nimport React from \"react\";\nimport axios from 'axios';\nimport arduino from '../img/arduino.png';\nimport { useState } from 'react';\n\n\nexport default function SingUp({ navigation }) {\n    const [show, setShow] = React.useState(false);\n\n\n    function BoxForm() {\n        const [username, setUsername] = React.useState(\"\");\n        const [password, setPassword] = React.useState(\"\");\n        const [password_confirm, setPassword_confirm] = React.useState(\"\");\n        const [email, setEmail] = React.useState(\"\");\n        const [name, setName] = React.useState(\"\");\n        const [message, setMessage] = React.useState(\"\");\n        const [dangerform, setdangerform] = React.useState(false);\n        const [dangerformUser, setdangerformUser] = React.useState(false);\n        const [statusLogin, setstatusLogin] = React.useState(\"\");\n\n        const [show, setShow] = React.useState(false);\n\n\n        function Create() {\n            if (password != password_confirm) {\n                setMessage('senhas não conferem');\n                setdangerform(true)\n            } else {\n                setdangerform(false)\n                axios.get('https://apiarduinowebcontrol.herokuapp.com/', {\n                    params: {\n                        req: 'newuser',\n                        username: username,\n                        password: password,\n                        name: name,\n                        email: email\n                    }\n                })\n                    .then(function (response) {\n                        // manipula o sucesso da requisição\n                        console.log(response.data);\n                        setstatusLogin(response.data)\n                    })\n                if (statusLogin.warning_error == \"User already exists\") {\n                    setdangerformUser(true);\n                } else {\n                    setdangerformUser(false);\n                    setShow(!show)\n                    setTimeout(\n                        function () {\n                            navigation.navigate('Login')\n                        }\n                            .bind(this),\n                        2000\n                    );\n                }\n            }\n        }\n        console.log(statusLogin)\n        var passwordError = dangerform;\n\n\n\n        return (\n            <Box alignItems=\"center\" w={'xs'} bg={'light.50'} borderRadius={10} shadow={5}>\n                <Box w=\"90%\" alignItems=\"center\">\n                    <Collapse isOpen={show}>\n                        <Alert w=\"100%\" colorScheme=\"violet\" status=\"success\">\n                            <VStack space={2} flexShrink={1} w=\"100%\">\n                                <VStack flexShrink={1} space={2} alignItems=\"center\" justifyContent=\"space-between\">\n                                    <VStack space={1} flexShrink={1} alignItems=\"center\">\n\n                                        <Heading top={0} fontSize={20}>\n                                            Bem vindo! sua conta foi criada com sucesso 🥳\n                                        </Heading>\n\n\n                                    </VStack>\n                                </VStack>\n                            </VStack>\n                        </Alert>\n                    </Collapse>\n\n                </Box>\n                <Box w=\"90%\" maxWidth=\"300px\">\n                    <Center>\n                        <Heading top={1} fontSize={22}>Cadastre-se</Heading>\n                    </Center>\n\n                    <FormControl marginTop={5} >\n                        <Stack mx=\"4\" >\n                            <FormControl.Label >Nome </FormControl.Label>\n                            <Input defaultValue={name} borderBottomColor={'light.200'} variant=\"underlined\" type=\"user\" placeholder=\"\"\n                                onChangeText={(value) => setName(value)}\n                            ></Input>\n                            <FormControl.HelperText>\n\n                            </FormControl.HelperText>\n\n                        </Stack>\n                    </FormControl>\n\n                    <FormControl marginTop={5} isInvalid={dangerformUser}>\n                        <Stack mx=\"4\" >\n                            <FormControl.Label >Usuário </FormControl.Label>\n                            <Input defaultValue={username} borderBottomColor={'light.200'} variant=\"underlined\" type=\"user\" placeholder=\"\"\n                                onChangeText={(value) => setUsername(value)}\n                            ></Input>\n                            <FormControl.HelperText>\n\n                            </FormControl.HelperText>\n                            <FormControl.ErrorMessage leftIcon={<WarningOutlineIcon size=\"xs\" />}>\n                                Usuário já existe\n                            </FormControl.ErrorMessage>\n                        </Stack>\n                    </FormControl>\n\n                    <FormControl marginTop={5} >\n                        <Stack mx=\"4\" >\n                            <FormControl.Label >E-mail </FormControl.Label>\n                            <Input defaultValue={email} borderBottomColor={'light.200'} variant=\"underlined\" type=\"e-mail\" placeholder=\"\"\n                                onChangeText={(value) => setEmail(value)}\n                            ></Input>\n                            <FormControl.HelperText>\n\n                            </FormControl.HelperText>\n                            <FormControl.ErrorMessage leftIcon={<WarningOutlineIcon size=\"xs\" />}>\n                                Usuário não existe\n                            </FormControl.ErrorMessage>\n                        </Stack>\n                    </FormControl>\n\n                    <FormControl marginBottom={5} isInvalid={passwordError}>\n                        <Stack mx=\"4\" >\n                            <FormControl.Label >Senha</FormControl.Label>\n                            <Input borderBottomColor={'light.200'} type=\"password\" variant=\"underlined\" placeholder=\"*******\"\n                                onChangeText={setPassword} />\n\n                            <FormControl.HelperText>\n\n                            </FormControl.HelperText>\n                            <FormControl.ErrorMessage leftIcon={<WarningOutlineIcon size=\"xs\" />}>\n                                Senhas não conferem\n                            </FormControl.ErrorMessage>\n                        </Stack>\n                    </FormControl>\n\n                    <FormControl marginBottom={5} >\n                        <Stack mx=\"4\" >\n                            <FormControl.Label >Confirmar senha</FormControl.Label>\n                            <Input defaultValue={password_confirm} borderBottomColor={'light.200'} type=\"password\" variant=\"underlined\" placeholder=\"*******\"\n                                onChangeText={setPassword_confirm} />\n\n                            <FormControl.HelperText>\n\n                            </FormControl.HelperText>\n\n                        </Stack>\n                    </FormControl>\n\n                    <Box alignItems=\"center\" marginBottom={5}>\n                        <Button bg={'indigo.800'} w={'50%'} variant={\"solid\"} colorScheme={'indigo'} borderRadius={20} onPress={() => Create()}>\n                            <Text color={'light.50'}>Criar</Text>\n                        </Button>\n                    </Box>\n\n                </Box>\n\n\n\n\n\n            </Box>);\n    }\n\n\n\n\n    return (\n        <NativeBaseProvider>\n\n            <Center _dark={{ bg: \"blueGray.900\" }} _light={{ bg: \"violet.900\" }} px={4} flex={1}>\n\n                <BoxForm></BoxForm>\n            </Center>\n        </NativeBaseProvider>\n    );\n}","import * as React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nconst Stack = createNativeStackNavigator();\n\n//screens\nimport Login from './components/screens/Login';\nimport DashBorard from './components/screens/dashboard';\nimport SingUp from './components/screens/SingUp';\n\n\n\nexport default function App() {\n\n  const [loginStatus, setLoginState] = useState('Login');\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const value = await AsyncStorage.getItem('LoginSave')\n        if (value !== null) {\n          setLoginState(value)\n        }\n      } catch (e) {\n      }\n    }\n    getData();\n\n\n  })\n  \n  function CheckState(){\n    return (\n      <NavigationContainer>\n        <Stack.Navigator initialRouteName={loginStatus}>\n          <Stack.Screen name=\"Login\" component={Login} options={{ headerShown: false }} />\n          <Stack.Screen name=\"DashBorard\" component={DashBorard} options={{ headerShown: false, headerBackVisible: false }} />\n          <Stack.Screen name=\"SingUp\" component={SingUp} options={{ headerShown: false, headerBackVisible: false }} />\n  \n  \n        </Stack.Navigator>\n      </NavigationContainer>)\n  }\n  return(\n    <CheckState></CheckState>\n  )\n\n\n}\n\n"],"sourceRoot":""}